function varargout = installer
%INSTALLER  Adds DMAT folders to your MATLAB path
%   INSTALLER() checks if you have all the files for the DMA Toolbox,
%   compiles binaries if needed, adds folders to the MATLAB path, runs the
%   licenser and asks for extra information if needed.
%
%   Author: Joachim Vandekerckhove (joachim.vandekerckhove@psy.kuleuven.be)
%   Part of the DMA Toolbox. Please read the End User License Agreement,
%   contained in 'dmateula.txt' or by invoking the DMATLICENSE command. 
%   See also http://ppw.kuleuven.be/okp/dmatoolbox.

%  Edit 0.4: Updated for version 0.4.
%  Edit 0.5: Updated for version 0.5. Likely final update.

if nargout
    varargout{1} = dmatcontents;
    return
end

f = filesep;
% First check if DMAT files are where they're supposed to be
if ispref('dmatoolbox','dmatdir')
    dmatdir = getpref('dmatoolbox','dmatdir');
else
    if dmatfilesfound(pwd)
        dmatdir = pwd;
    else
        dmatdir = [matlabroot f 'toolbox' f 'dmatoolbox' f];
    end
end

% If not, ask user where they put the files
while ~dmatfilesfound(dmatdir)
    b = questdlg(sprintf(['It appears that the DMA Toolbox is not, or '...
        'not completely, installed in %s. Do you want to select the '...
        'directory where you put the files?'],dmatdir),...
        'Couldn''t find all DMAT files','Yes','No/Cancel','Yes');
    if strcmp(b,'Yes')
        dmatdir = uigetdir;
    else
        disp 'Installation not completed!'
        return
    end
end
setpref('dmatoolbox','dmatdir',dmatdir);

% As soon as files are located, add the directory to the path
addpath(genpath(dmatdir),0)
pathplace = [matlabroot f 'toolbox' f 'local'];

% Now try to save the path
while isempty(pathplace) || savepath([pathplace f 'pathdef.m'])
    b = questdlg(sprintf(['You do not appear to have access to the '...
        'directory %s. Do you want to select an alternative location '...
        'for saving your path file?'],pathplace),...
        'Couldn''t save to matlab root directory','Yes','No/Cancel','Yes');
    if strcmp(b,'Yes')
        pathplace = uigetdir;
    else
        disp 'Installation not completed!'
        return
    end
end

% Important: compile binary if necessary
mexfilename = ['cdfdif.' mexext];
if ~exist(mexfilename,'file')
    nn = get(0,'CommandWindowSize'); nn = nn(1)-1;
    fprintf([repmat('-',1,nn) '\n'])
    disp(parsetoline(['The DMAT installer needs to compile a binary ',...
        'file that is appropriate for your system. If you have never ',...
        'compiled MEX-files before, MATLAB may ask you to identify a ',...
        'C compiler. Most compilers will do, including Lcc C.']))
    setnodes
    fprintf([repmat('-',1,nn) '\n'])
else
   setpref('dmatoolbox','nodes',[6 6]);
end

% And remove excess binaries
% dc = dir(fullfile(dmatdir,'cdfdif.*'));
% names = {dc.name};
% extensions = cellfun(@(x)x(8:end),names,'uni',0);
% superfluous = ~ismember(extensions,{'c','m',mexext});
% if any(superfluous)
%     cellfun(@(x)delete(fullfile(dmatdir,x)),names(superfluous));
% end

% Show EULA
dmatlicense

% Finish on a happy note
if dmatlicense
    fprintf('DMAT was succesfully installed. Run <a href="matlab:test_main">test_main</a> to see it work.\n')
else
    % Or not
    warning('DMAT:needToAcceptLicense',...
        ['You did not accept the End User License Agreement.\n',...
        'DMAT will not function until you call DMATLICENSE ',...
        'again and accept the EULA.'])
end


% Subfunction
function ok = dmatfilesfound(dmatdir)

if ~strcmp(filesep,dmatdir(end))
    dmatdir = [dmatdir filesep];
end

% If directory does not exist, return false
if ~exist(dmatdir,'dir')
    ok = false;
    return
end

% Read directory
dc = dir(dmatdir);

% If no files there, return false
if isempty(dc)
    ok = false;
    return
end

% Check contents against list
foundcontents = {dc.name};
missing = ~ismember(dmatcontents,foundcontents);
% dmc=dmatcontents;%dmc{missing}

% If anything missing, return false, else return true
ok = ~any(missing);

function dc = dmatcontents
%%
dc={'.',...
    '..',...
    'Contents.m',...
    'Readme.m',...
    'absfit.m',...
    'bigger.m',...
    'bootstrap.m',...
    'cdfdif.c',...
    'cdfdif.m',...
    'cdfdif10.c',...
    'cdfdif20.c',...
    'cdfdif30.c',...
    'cdfdif40.c',...
    'chi2test.m',...
    'clr.schms',...
    'dcel2str.m',...
    'descriptives.m',...
    'dmat_textmode.m',...
    'dmatdoc.m',...
    'dmateula.txt',...
    'dmateula2.txt',...
    'dmatgui.m',...
    'dmatlicense.m',...
    'dmatref.m',...
    'dmatremove.m',...
    'dmatrescue.m',...
    'dmatsite.m',...
    'eachcell.m',...
    'edfcdf.m',...
    'emstable.m',...
    'ewmav2.m',...
    'ezdiff.m',...
    'fitdiffv13.m',...
    'fitlast.m',...
    'genalg.m',...
    'generateguess.m',...
    'getnodes.m',...
    'inpcheck.m',...
    'installer.m',...
    'invcdfdif.m',...
    'isconsistent.m',...
    'iseye.m',...
    'isgood.m',...
    'isnested.m',...
    'isposdef.m',...
    'isvaliddataset.m',...
    'linreg.m',...
    'loaddmatdata.m',...
    'm2q.m',...
    'modelfittable.m',...
    'multiestv4.m',...
    'multifitv4.m',...
    'multisimul.m',...
    'multisimulwo.m',...
    'namepars.m',...
    'orthpoly.m',...
    'outliertreatment.m',...
    'outputtoxls.m',...
    'pairs2struct.m',...
    'paramplot.m',...
    'parsetoline.m',...
    'perturb.m',...
    'plotewma.m',...
    'plotparreg.m',...
    'processdata.m',...
    'processhessian.m',...
    'q2m.m',...
    'qpplot.m',...
    'qtable.m',...
    'quantest.m',...
    'runqueue.m',...
    'runqueue_q.m',...
    'setnodes.m',...
    'simuldiff.m',...
    'simuldiffwo.m',...
    'smaller.m',...
    'spl.schms',...
    'splitdata.m',...
    'standardparset.m',...
    'str2dcel.m',...
    'var2str.m',...
    'vincentise.m',...
    'waldtable.m'};