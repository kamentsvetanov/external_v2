function dmatgui(varargin)
%DMATGUI  Graphical interface for the Diffusion Model Analysis Toolbox
%   DMATGUI opens a graphical user interface that helps you build an array
%   of OPTIONS structures for use in DMAT. The structures are fed into the
%   MULTIESTV4 function along with a dataset you choose, and results are
%   presented in the GUI.
%
%   The function also contains some extra features, such as a graphical
%   interface to simulating data, and a tool for descriptive statistical
%   analysis.
%
%   DMATGUI makes use of the UITABLE, for which some functionality has
%   changed since the original release of DMAT. This version was written
%   and tested on: 
%      MATLAB Version 7.10.0.499 (R2010a)
%      Operating System: Microsoft Windows 7 Version 6.1 (Build 7600)
%      Java VM Version: Java 1.6.0_12-b04 with Sun Microsystems Inc. Java
%      HotSpot(TM) Client VM mixed mode
%
%   If you have an older version of MATLAB and DMATGUI (in particular, the
%   tables and spreadsheets) exhibits unexpected behavior, check the
%   website for a back version of DMAT.
%
%   See also MULTIESTV4.
%
%   Author: Joachim Vandekerckhove (joachim.vandekerckhove@psy.kuleuven.be)
%   Part of the DMA Toolbox. Please read the End User License Agreement,
%   contained in 'dmateula.txt' or by invoking the DMATLICENSE command.
%   See also http://ppw.kuleuven.be/okp/dmatoolbox.

%   Edit 0.3: Removed bug that caused design matrix input to crash with
%   single condition data sets.
%   Edit 0.4: Added option to load CSV and DAT files.
%   Edit 0.4: Added X2 to Advanced Options window.
%   Edit 0.5: Migrated to new uitable component. This may compromise
%   version compatibility.

%% ---------------------------------------------------------------------
%

developermode = ispref('dmatoolbox','iamadeveloper')&&...
    getpref('dmatoolbox','iamadeveloper');
windowsmodal = ~developermode;

if windowsmodal
    windowstyle = 'modal';
else
    windowstyle = 'normal';
end
if nargin && isa(varargin{1},'function_handle')
    if developermode
        varargin{:} %#ok
        feval(varargin{:});
        disp ---------
        return
    end
    try
        feval(varargin{:});
    catch
        try
            beep
            if exist('DMAT','var')
                save('~$crash.dmt','DMAT');
                wstr = sprintf(['An error has occured and an emergency back-up has '...
                    'been made. It may be prudent to restart DMAT. Error was: %s'],lasterr);
                disp(wstr);
                warndlg(wstr,'Critical warning');
            else
                wstr = sprintf(['An error has occured. It may be ',...
                    'prudent to restart DMAT. Error was: %s'],lasterr);
                disp(wstr);
                warndlg(wstr,'Critical warning');
            end
        catch
            wstr = sprintf(['An error has occured and DMAT was unable '...
                'to make a crash backup. Your analyses may have been '...
                'lost. Error was: %s'],lasterr);
            disp(wstr);
            warndlg(wstr,'Critical error');
        end
    end
else
    if developermode
        beep
        fprintf('\n\n\t\tYou are in DEVELOPER MODE! (Yes you are!)\n\n')
        beep
    end
    DMAT = struct('CurrentModel',multiestv4,...
        'Output',[],...
        'Queue',[],...
        'History',[],...
        'Data',[]);
    OpeningFcn
end



%% ---------------------------------------------------------------------
%
    function OpeningFcn
        dmatgui(@(x)setcolors(x),'green');
        spl = load('spl.schms','-mat');
        DMAT.GUIcontrols.Images.Button = spl.button;
        DMAT.GUIcontrols.Images.Sedes = spl.sedes;
        DMAT.GUIcontrols.Images.Pip = spl.pip;
        DMAT.GUIcontrols.Created = datestr(now);
        DMAT.GUIcontrols.OutputWindow.cond2plot=1;
        DMAT.GUIcontrols.OutputWindow.par2plot=7;

        % Main window
        DMAT.GUIcontrols.WindowHandles.Main = figure(...
            'NumberTitle','off',...
            'Toolbar','None',...    'Resize','off',...
            'Color',DMAT.GUIcontrols.ColorScheme.Main,...
            'Name','DMA Toolbox v1.0',...    'DockControls','off',...    'MenuBar','none',...
            'Units','normalized',...
            'WindowStyle',windowstyle,...
            'Position',[.25 .25 .53 .6]);

        % Table
        DMAT.GUIcontrols.MainWindow.tbl = [];
        % #edited 0.5# Trap annoying UITABLE message with EVALC
        DMAT.GUIcontrols.MainWindow.tbl = uitable(...
            'Data',cell(80,3),...
            'ColumnName',{'Condition','Response','Reaction Time'},...
            'Parent',DMAT.GUIcontrols.WindowHandles.Main,... 
            'Units','normalized',...
            'Position',[.455 .235 .51 .71]);
        DMAT.GUIcontrols.uitableclass = ...
            class(DMAT.GUIcontrols.MainWindow.tbl);

        % Below the table
        DMAT.GUIcontrols.MainWindow.filename = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','edit',...
            'Units','normalized',...
            'Position',[.55 .175 .3 .045],...
            'BackgroundColor',[1 1 1],...
            'Callback',@(y,z)dmatgui(@filename_Callback));
        DMAT.GUIcontrols.MainWindow.fnt = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'String','Datafile:',...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'Units','normalized',...
            'Position',[.445 .175 .10 .03]);
        DMAT.GUIcontrols.MainWindow.brw = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Browse',...
            'Units','normalized',...
            'Position',[.865 .175 .10 .045],...
            'Callback',@(y,z)dmatgui(@brw_Callback));
        DMAT.GUIcontrols.MainWindow.outputviewer = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Switch to output viewer',...
            'Units','normalized',...
            'Position',[.445 .1 .255 .045],...
            'Callback',@(y,z)dmatgui(@outputviewer_Callback));
        DMAT.GUIcontrols.MainWindow.session = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Load/Save session',...
            'Units','normalized',...
            'Position',[.71 .1 .255 .045],...
            'Callback',@(y,z)dmatgui(@session_Callback));

        DMAT.GUIcontrols.MainWindow.tools = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Simulator',...
            'Units','normalized',...
            'Position',[.03 .1 .11 .045],...
            'Callback',@(y,z)dmatgui(@tools_Callback));
        DMAT.GUIcontrols.MainWindow.rescue = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Rescue',...
            'Units','normalized',...
            'Position',[.15 .1 .1 .045],...
            'Callback',@dmatrescue);
        DMAT.GUIcontrols.MainWindow.textmode = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Text Mode',...
            'Units','normalized',...
            'Position',[.26 .1 .12 .045],...
            'Callback',@(y,z)dmatgui(@textmode_Callback));
        DMAT.GUIcontrols.MainWindow.abt = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','About',...
            'Units','normalized',...
            'Position',[.705 .02 .08 .045],...
            'Callback',@(y,z)dmatgui(@abt_Callback));
        DMAT.GUIcontrols.MainWindow.hlp = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Help',...
            'Units','normalized',...
            'Position',[.795 .02 .08 .045],...
            'Callback',@(y,z)dmatgui(@hlp_Callback));
        DMAT.GUIcontrols.MainWindow.cls = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Exit',...
            'Units','normalized',...
            'Position',[.885 .02 .08 .045],...
            'Callback',@(y,z)dmatgui(@cls_Callback));

        % Panels
        DMAT.GUIcontrols.MainWindow.datpnl=uipanel(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Main,...
            'Title','Dataset',...
            'Units','normalized',...
            'Position',[.425 .075 .565 .915],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main);
        DMAT.GUIcontrols.MainWindow.setpnl=uipanel(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Main,...
            'Title','Change settings',...
            'Units','normalized',...
            'Position',[.01 .66 .4 .33],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main);
        DMAT.GUIcontrols.MainWindow.cursetpnl=uipanel(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Main,...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'Title','Current settings',...
            'Units','normalized',...
            'Position',[.01 .445 .4 .200]);
        DMAT.GUIcontrols.MainWindow.quepnl=uipanel(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Main,...
            'Title','Queue actions',...
            'Units','normalized',...
            'Position',[.01 .2 .4 .23],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main);
        DMAT.GUIcontrols.MainWindow.toolspnl=uipanel(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Main,...
            'Title','Tools',...
            'Units','normalized',...
            'Position',[.01 .075 .4 .11],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main);

        % Outliers
        DMAT.GUIcontrols.MainWindow.oltx = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'String','Outlier treatment:',...
            'Units','normalized',...
            'Position',[.03 .910 .18 .035],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');
        DMAT.GUIcontrols.MainWindow.oltr = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','popupmenu',...
            'String',{'None','EWMA Preprocessing','Mixed model',...
            'EWMA + Mixed Model','Absolute cut-off','Relative cut-off'},...
            'Units','normalized',...
            'Position',[.2 .905 .18 .045],...
            'BackgroundColor',[1 1 1],...
            'Callback',@(y,z)dmatgui(@oltr_Callback));

        % Design matrices
        DMAT.GUIcontrols.MainWindow.destx = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'String','View/Edit design matrix:',...
            'Units','normalized',...
            'Position',[.03 .85 .305 .035],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');
        DMAT.GUIcontrols.MainWindow.desp = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','popupmenu',...
            'String',{'','a','Ter','eta','z0','sZ','st','v'},...
            'Units','normalized',...
            'Position',[.265 .85 .115 .045],...
            'BackgroundColor',[1 1 1],...
            'Callback',@(y,z)dmatgui(@desp_Callback));

        % Fixes
        DMAT.GUIcontrols.MainWindow.fixtx = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'String','Fix parameters:',...
            'Units','normalized',...
            'Position',[.03 .795 .30 .035],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');
        DMAT.GUIcontrols.MainWindow.fixin = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Pushbutton',...
            'String','Set fixed values',...
            'Units','normalized',...
            'Position',[.20 .795 .18 .045],...
            'Callback',@(y,z)dmatgui(@fixin_Callback));

        % Biases
        DMAT.GUIcontrols.MainWindow.biastx = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'String','Set specific bias: z0 = a * B:',...
            'Units','normalized',...
            'Position',[.03 .742 .305 .035],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');
        DMAT.GUIcontrols.MainWindow.biasbut = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Pushbutton',...
            'String','Set B',...
            'Units','normalized',...
            'Position',[.30 .74 .08 .045],...
            'Callback',@(y,z)dmatgui(@biasbut_Callback));

        % Advanced
        DMAT.GUIcontrols.MainWindow.advanced = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Pushbutton',...
            'String','Advanced options',...
            'Units','normalized',...
            'Position',[.03 .685 .21 .045],...
            'Callback',@(y,z)dmatgui(@advanced_Callback));
        DMAT.GUIcontrols.MainWindow.defaults = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Pushbutton',...
            'String','Defaults',...
            'Units','normalized',...
            'Position',[.25 .685 .13 .045],...
            'Callback',@(y,z)dmatgui(@defaults_Callback));

        % Stats
        DMAT.GUIcontrols.MainWindow.otlstat = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'Units','normalized',...
            'Position',[.03 .58 .36 .03],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');
        DMAT.GUIcontrols.MainWindow.desstat = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'Units','normalized',...
            'Position',[.03 .545 .36 .03],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');
        DMAT.GUIcontrols.MainWindow.fixstat = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'Units','normalized',...
            'Position',[.03 .51 .36 .03],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');
        DMAT.GUIcontrols.MainWindow.biasstat = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','text',...
            'Units','normalized',...
            'Position',[.03 .475 .36 .03],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main,...
            'HorizontalAlignment','left');

        % Queue options
        DMAT.GUIcontrols.MainWindow.runque = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Run',...
            'Units','normalized',...
            'Position',[.03 .34 .08 .05],...
            'Callback',@(y,z)dmatgui(@runque_Callback));
        DMAT.GUIcontrols.MainWindow.vieque = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','View',...
            'Units','normalized',...
            'Position',[.12 .34 .08 .05],...
            'Callback',@(y,z)dmatgui(@vieque_Callback));
        DMAT.GUIcontrols.MainWindow.savque = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Save',...
            'Units','normalized',...
            'Position',[.21 .34 .08 .05],...
            'Callback',@(y,z)dmatgui(@savque_Callback));
        DMAT.GUIcontrols.MainWindow.loadque = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Load',...
            'Units','normalized',...
            'Position',[.3 .34 .08 .05],...
            'Callback',@(y,z)dmatgui(@loadque_Callback));

        DMAT.GUIcontrols.MainWindow.addtx = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','Text',...
            'String','Add to queue:',...
            'Units','normalized',...
            'Position',[.03 .285 .15 .03],...
            'HorizontalAlignment','Left',...
            'Backgroundcolor',DMAT.GUIcontrols.ColorScheme.Main);
        DMAT.GUIcontrols.MainWindow.addque = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Current model',...
            'Units','normalized',...
            'Position',[.03 .225 .17 .05],...
            'Callback',@(y,z)dmatgui(@addque_Callback));
        DMAT.GUIcontrols.MainWindow.addpre = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','PushButton',...
            'String','Predefined',...
            'Units','normalized',...
            'Position',[.21 .225 .17 .05],...
            'Callback',@(y,z)dmatgui(@addpre_Callback));

        % Message
        DMAT.GUIcontrols.MainWindow.message = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Main,...
            'Style','text',...
            'String','DMAT is active.',...
            'Units','normalized',...
            'Position',[.02 .005 .375 .06],...
            'HorizontalAlignment','Left',...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main);

        fprintf(1,'GUI active.\n')
        dmatgui(@setstats)
        if exist('~$crash.dmt','file')
            question = sprintf('Found emergency save file (made %s). Load?',...
                DMAT.GUIcontrols.Created);
            button = questdlg(question,'Crash recovery',...
                'Yes, recover it','No, delete it','Ignore it','Ignore it');
            if ~isempty(button)
                switch button(1)
                    case 'Y'
                        gc = DMAT.GUIcontrols;
                        dmt = load('~$crash.dmt','-mat');
                        DMAT = dmt.DMAT;
                        DMAT.GUIcontrols = gc;
                        setstats
                        if isfield(DMAT,'Data') && ~isempty(DMAT.Data),showdata,end
                        delete('~$crash.dmt')
                    case 'N'
                        delete('~$crash.dmt')
                        disp('File deleted.')
                end
            end
        end
        uiwait(DMAT.GUIcontrols.WindowHandles.Main)
        dmatgui(@OutputFcn)

    end



%% ---------------------------------------------------------------------
%
    function varargout = OutputFcn

        fnms = fieldnames(DMAT.GUIcontrols.WindowHandles);

        for ctr=1:length(fnms)
            if ishandle(DMAT.GUIcontrols.WindowHandles.(fnms{ctr}))
                close(DMAT.GUIcontrols.WindowHandles.(fnms{ctr}))
            end
        end
        fprintf(1,'Exiting...\n')
        varargout{1} = DMAT;
        if exist('~$temp.dmt','file')
            delete('~$temp.dmt');
        end

    end



%% ---------------------------------------------------------------------
%
    function brw_Callback

        [fn, pat] = uigetfile({'*.mat','MAT-file (*.mat)';...
            '*.csv','Comma separated values (*.csv)';...
            '*.dat','TAB delimited file (*.dat)';...
            '*.tab','TAB delimited file (*.tab)';...
            '*.txt','Space delimited TXT file (*.txt)'},...
            'Select your datafile');
        if ~isempty(fn) && ischar(fn)
            DMAT.Data.Filename = [pat fn];
            loaddata;
        end

    end



%% ---------------------------------------------------------------------
%
    function err=loaddata(override)
        
        err = 0;

        if ~nargin
            override = 0;
        end

        if isfield(DMAT.Data,'Filename')
            setmessage('Loading file...')

            if ~override && isfield(DMAT.Data,'Dataset') && ~isempty(DMAT.Data.Dataset)
                button = questdlg(['Loading a new data set will clear ',...
                    'your session. Continue?'],'Are you sure?',...
                    'Yes, continue','No, cancel','No, cancel');
                cont = ~isempty(button) && button(1)=='Y';
            else
                cont = true;
            end

            if cont
                [data errormsg warnmsg] = loaddmatdata(DMAT.Data.Filename);

                if ~isempty(errormsg)
                    lasterr(errormsg{[2 1]})
                    errordlg(errormsg{[2 1]},'on')
                    setmessage('File not loaded.')
                    err = 1;
                else
                    if ~isempty(warnmsg)
                        lastwarn(warnmsg{[2 1]})
                        warndlg(warnmsg{[2 1]},'replace')
                    end
                    if ~override
                        DMAT = struct('CurrentModel',multiestv4,...
                            'Output',[],...
                            'Queue',[],...
                            'History',[],...
                            'Data',DMAT.Data,...
                            'GUIcontrols',DMAT.GUIcontrols);
                    end
                    DMAT.Data.Conditions = unique(data(:,1));
                    DMAT.Data.NCond = length(DMAT.Data.Conditions);
                    DMAT.Data.Dataset = data;
                    DMAT.Data.N = size(data,1);
                    fixdm
                    if showdata
                        setmessage(['Your dataset is loaded, but is ',...
                            'too large to display completely (N=',...
                            num2str(DMAT.Data.N,'%i).')]);
                    else
                        setmessage('File loaded.')
                    end
                end
            else
                setmessage('No file loaded.')
            end
            setstats

        end
    end


%% ---------------------------------------------------------------------
%
    function varargout = showdata

        mnod = 1e4;
        err = 0;
        if DMAT.Data.N<=mnod
            set(DMAT.GUIcontrols.MainWindow.tbl,...
                'Data',num2cell(DMAT.Data.Dataset))
            setmessage('Data loaded.')
        else
            set(DMAT.GUIcontrols.MainWindow.tbl,...
                'Data',num2cell(DMAT.Data.Dataset(1:mnod,:)));
            err = 1;
            setmessage(sprintf(['Your dataset is too large to display ',...
                'completely (n = %i).'],DMAT.Data.N));
        end
        set(DMAT.GUIcontrols.MainWindow.filename,...
            'String',DMAT.Data.Filename);
        if nargout
            varargout={err};
        end

    end



%% ---------------------------------------------------------------------
%
    function filename_Callback

        if isfield(DMAT.Data,'Filename')
            temp = DMAT.Data.Filename;
        else
            temp = [];
        end
        DMAT.Data.Filename = ...
            get(DMAT.GUIcontrols.MainWindow.filename,'String');
        err=loaddata;
        if err
            set(DMAT.GUIcontrols.MainWindow.filename,'String',temp)
            DMAT.Data.Filename = temp;
        end

    end



%% ---------------------------------------------------------------------
%
    function oltr_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
            set(DMAT.GUIcontrols.MainWindow.oltr,'Value',1)
        else
            val = get(DMAT.GUIcontrols.MainWindow.oltr,'Value');
            if val==1
                DMAT.CurrentModel.OutlierTreatment = 'None';
            elseif val==2
                DMAT.CurrentModel.OutlierTreatment = 'EWMA';
            elseif val==3
                DMAT.CurrentModel.OutlierTreatment = 'Mixed Model';
            elseif val==4
                DMAT.CurrentModel.OutlierTreatment = 'Both';
            elseif val>4
                DMAT.GUIcontrols.WindowHandles.Outlier = figure(...
                    'NumberTitle','off',...
                    'Toolbar','None',...
                    'Units','normalized',...
                    'Resize','on',...
                    'Color',DMAT.GUIcontrols.ColorScheme.Outliers,...
                    'Position',[.2 .6 .2 .17],...
                    'MenuBar','figure',...
                    'DockControls','on',...
                    'WindowStyle',windowstyle);

                switch val
                    case 5
                        if strcmp(DMAT.CurrentModel.OutlierTreatment,...
                                'Absolute cut-off')
                            maxstr = num2str(DMAT.CurrentModel.OutlierMax);
                            minstr = num2str(DMAT.CurrentModel.OutlierMin);
                        else
                            maxstr = '';
                            minstr = '';
                        end
                        
                        set(DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Name','Set absolute cut-offs');
                        DMAT.GUIcontrols.OutlierWindow.tx2=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Text',...
                            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Outliers,...
                            'String','Enter minimum value (s):',...
                            'Units','normalized',...
                            'Position',[.05 .68 .6 .15],...
                            'HorizontalAlignment','Left');
                        DMAT.GUIcontrols.OutlierWindow.tx1=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Text',...
                            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Outliers,...
                            'String','Enter maximum value (s):',...
                            'Units','normalized',...
                            'Position',[.05 .43 .6 .15],...
                            'HorizontalAlignment','Left');
                        DMAT.GUIcontrols.OutlierWindow.min=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Edit',...
                            'String',minstr,...
                            'Units','normalized',...
                            'Position',[.65 .7 .3 .15],...
                            'BackgroundColor',[1 1 1]);
                        DMAT.GUIcontrols.OutlierWindow.max=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Edit',...
                            'String',maxstr,...
                            'Units','normalized',...
                            'Position',[.65 .45 .3 .15],...
                            'BackgroundColor',[1 1 1]);
                        DMAT.GUIcontrols.OutlierWindow.t.OutlierTreatment = ...
                            'Absolute cut-off';
                    case 6
                        if strcmp(DMAT.CurrentModel.OutlierTreatment,...
                                'Relative cut-off')
                            maxstr = num2str(DMAT.CurrentModel.OutlierMax);
                            minstr = num2str(DMAT.CurrentModel.OutlierMin);
                        else
                            maxstr = '';
                            minstr = '';
                        end
                        
                        set(DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Name','Set relative cut-offs');
                        DMAT.GUIcontrols.OutlierWindow.tx2=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Text',...
                            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Outliers,...
                            'String','Enter minimum z-score:',...
                            'Units','normalized',...
                            'Position',[.05 .68 .6 .15],...
                            'HorizontalAlignment','Left');
                        DMAT.GUIcontrols.OutlierWindow.tx1=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Text',...
                            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Outliers,...
                            'String','Enter maximum z-score:',...
                            'Units','normalized',...
                            'Position',[.05 .43 .6 .15],...
                            'HorizontalAlignment','Left');
                        DMAT.GUIcontrols.OutlierWindow.min=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Edit',...
                            'String',minstr,...
                            'Units','normalized',...
                            'Position',[.65 .7 .3 .15],...
                            'BackgroundColor',[1 1 1]);
                        DMAT.GUIcontrols.OutlierWindow.max=uicontrol(...
                            DMAT.GUIcontrols.WindowHandles.Outlier,...
                            'Style','Edit',...
                            'String',maxstr,...
                            'Units','normalized',...
                            'Position',[.65 .45 .3 .15],...
                            'BackgroundColor',[1 1 1]);
                        DMAT.GUIcontrols.OutlierWindow.t.OutlierTreatment = ...
                            'Relative cut-off';
                end
                DMAT.GUIcontrols.OutlierWindow.ok = uicontrol(...
                    DMAT.GUIcontrols.WindowHandles.Outlier,...
                    'Style','PushButton',...
                    'String','OK',...
                    'Units','normalized',...
                    'Position',[.1 .1 .35 .15],...
                    'Callback',@(y,z)dmatgui(@olok_Callback));
                DMAT.GUIcontrols.OutlierWindow.cnl = uicontrol(...
                    DMAT.GUIcontrols.WindowHandles.Outlier,...
                    'Style','PushButton',...
                    'String','Cancel',...
                    'Units','normalized',...
                    'Position',[.55 .1 .35 .15],...
                    'Callback',sprintf('close(%g)',DMAT.GUIcontrols.WindowHandles.Outlier));
            end
        end
        setstats

    end



%% ---------------------------------------------------------------------
%
    function olok_Callback

        olmax = str2double(get(DMAT.GUIcontrols.OutlierWindow.max,'String'));
        olmin = str2double(get(DMAT.GUIcontrols.OutlierWindow.min,'String'));

        if ~isscalar(olmax) || ~isscalar(olmin)
            errordlg('Bounds must be scalars.','Error','on');
        elseif olmax<=olmin;
            errordlg('Maxima ought to be higher than minima.','Error','on');
        elseif DMAT.GUIcontrols.OutlierWindow.t.OutlierTreatment(1)=='A' && any([olmax olmin]<0);
            errordlg('Absolute bounds must be positive or zero.','Error','on');
        else
            DMAT.CurrentModel.OutlierMax=olmax;
            DMAT.CurrentModel.OutlierMin=olmin;
            DMAT.CurrentModel.OutlierTreatment = ...
                DMAT.GUIcontrols.OutlierWindow.t.OutlierTreatment;
            setstats
            close(DMAT.GUIcontrols.WindowHandles.Outlier);
        end

    end



%% ---------------------------------------------------------------------
%
    function biasbut_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            DMAT.GUIcontrols.WindowHandles.Bias = figure(...
                'NumberTitle','off',...
                'Toolbar','None',...
                'Resize','off',...
                'Color',DMAT.GUIcontrols.ColorScheme.Bias,...
                'Units','normalized',...
                'Position',[.2 .5 .3 .15],...
                'MenuBar','figure',...
                'DockControls','off',...
                'WindowStyle',windowstyle,...
                'Name','Biases');
            sho = cell(1,DMAT.Data.NCond);
            if isfield(DMAT.CurrentModel,'SpecificBias'),
                for ctr = 1:length(DMAT.CurrentModel.SpecificBias),
                    if isnan(DMAT.CurrentModel.SpecificBias(ctr))
                        sho{ctr} = '';
                    else
                        sho{ctr} = num2str(DMAT.CurrentModel.SpecificBias(ctr));
                    end
                end
            end
            title = {};
            for ctr=1:DMAT.Data.NCond;
                title{ctr} = sprintf('Cond %i\n',DMAT.Data.Conditions(ctr));
            end
            DMAT.GUIcontrols.BiasWindow.tbl = uitable(...
                'Data',sho,...
                'ColumnName',title,...
                'Parent',DMAT.GUIcontrols.WindowHandles.Bias,...
                'ColumnWidth','auto',...
                'Units','normalized',...
                'ColumnEditable',true,...
                'Position',[.06 .4 .88 .5]);
            DMAT.GUIcontrols.BiasWindow.ok = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Bias,...
                'Style','PushButton',...
                'String','OK',...
                'Units','normalized',...
                'Position',[.06 .08 .26 .22],...
                'Callback',@(y,z)dmatgui(@bbok_Callback));
            DMAT.GUIcontrols.BiasWindow.cnl = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Bias,...
                'Style','PushButton',...
                'String','Cancel',...
                'Units','normalized',...
                'Position',[.36 .08 .26 .22],...
                'Callback',sprintf('close(%g)',DMAT.GUIcontrols.WindowHandles.Bias));
        end

    end



%% ---------------------------------------------------------------------
%
    function bbok_Callback

        d = cell(get(DMAT.GUIcontrols.BiasWindow.tbl,'Data'));
        biases = NaN(1,DMAT.Data.NCond);
        for ps=1:numel(d);
            tt = d{ps};
            if isempty(tt)
                biases(ps) = nan;
            elseif ischar(tt)
                biases(ps) = str2double(tt);
            else
                biases(ps) = tt;
            end
        end
        biases=reshape(biases,size(d));

        if any(biases<=0) || any(biases>=1)
            %     biases = [];
            %     tt = [];
            %     d = [];
            errordlg('Biases must be between 0 and 1, exclusive.','Error','on');
        else
            DMAT.CurrentModel.SpecificBias = biases;
            setstats
            close(DMAT.GUIcontrols.WindowHandles.Bias)
        end

    end



%% ---------------------------------------------------------------------
%
    function addque_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            if isfield(DMAT.CurrentModel,'Name')
                thisname = {DMAT.CurrentModel.Name};
            else
                thisname = {'My first model'};
            end
            name = inputdlg('Enter a name for this model','Enter a name',1,thisname);
            if ~isempty(name)
                DMAT.CurrentModel.Name = name{1};
                DMAT.Queue = [DMAT.Queue(:);DMAT.CurrentModel];
                setmessage(sprintf('Model ''%s'' added to queue.',DMAT.CurrentModel.Name))
            else
                setmessage('Model not added.')
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function addpre_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            strnames = {...
                'No effects',...
                'Effect on a only',...
                'Effect on Ter only',...
                'Effect on eta only',...
                'Effect on z0 only',...
                'Effect on sZ only',...
                'Effect on st only',...
                'Effect on v only',...
                'No effect on a',...
                'No effect on Ter',...
                'No effect on eta',...
                'No effect on z0',...
                'No effect on sZ',...
                'No effect on st',...
                'No effect on v',...
                'Unrestricted model',...
                };
            DMAT.GUIcontrols.WindowHandles.Predefined = figure(...
                'NumberTitle','off',...
                'Toolbar','None',...
                'Resize','off',...
                'Color',DMAT.GUIcontrols.ColorScheme.Predefined,...
                'Units','normalized',...
                'Position',[.05 .58 .22 .33],...
                'MenuBar','figure',...
                'DockControls','off',...
                'WindowStyle',windowstyle,...
                'Name','Add predefined model');
            DMAT.GUIcontrols.Predefined.lb = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Predefined,...
                'Style','Listbox',...
                'String',strnames,...
                'Units','normalized',...
                'Position',[.04 .035 .667 .91],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Predefined,...
                'Max',5,...
                'Min',1);
            DMAT.GUIcontrols.Predefined.add = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Predefined,...
                'Style','Pushbutton',...
                'String','Add',...
                'Units','normalized',...
                'Position',[.75 .80 .22 .10],...
                'Callback',@(y,z)dmatgui(@apadd_Callback));
            DMAT.GUIcontrols.Predefined.cnl = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Predefined,...
                'Style','Pushbutton',...
                'String','Cancel',...
                'Units','normalized',...
                'Position',[.75 .67 .22 .10],...
                'Callback',sprintf('close(%g)',DMAT.GUIcontrols.WindowHandles.Predefined));
        end

    end



%% ---------------------------------------------------------------------
%
    function apadd_Callback

        r = get(DMAT.GUIcontrols.Predefined.lb,'Value');
        newmodel = multiestv4;
        par = {'a','Ter','eta','z0','sZ','st','v'};
        ll = length(r);
        if ll>1, mul='s'; else mul=''; end

        for s=1:ll
            switch r(s)
                case 1
                    newmodel.Name = 'No effects';
                    newmodel.DesignMatrix = repmat({ones(DMAT.Data.NCond,1)},1,7);
                case {2,3,4,5,6,7,8}
                    newmodel.Name = sprintf('Effect on %s only',par{r(s)-1});
                    newmodel.DesignMatrix = repmat({ones(DMAT.Data.NCond,1)},1,7);
                    newmodel.DesignMatrix{r(s)-1} = [];
                case {9,10,11,12,13,14,15}
                    newmodel.Name = sprintf('No effect on %s only',...
                        par{r(s)-8});
                    newmodel.DesignMatrix = cell(1,7);
                    newmodel.DesignMatrix{r(s)-8} = ones(DMAT.Data.NCond,1);
                case 16
                    newmodel.Name = 'Unrestricted model';
                    newmodel.DesignMatrix = repmat({eye(DMAT.Data.NCond)},1,7);
                otherwise
                    % nothing
            end
            DMAT.Queue = [DMAT.Queue newmodel];
        end
        close(DMAT.GUIcontrols.WindowHandles.Predefined);
        setmessage(sprintf('Predefined model%s added to queue.',mul))

    end



%% ---------------------------------------------------------------------
%
    function runque_Callback

        if isempty(DMAT.Queue)
            errordlg('No models in queue.','Error','on');
        elseif ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            setmessage('Model queue submitted.')
            go
        end

    end



%% ---------------------------------------------------------------------
%
    function savque_Callback

        if ~isempty(DMAT.Queue)
            [fn, pat] = uiputfile({'*.dmq','DMA Queues (*.dmq)';'*.m','M-file (*.m)'},...
                'Save queue as','MyFirstQueue');
            if ~isempty(fn) && ischar(fn)
                switch fn(end)
                    case 'q'
                        queue=DMAT.Queue; %#ok
                        save([pat fn],'queue');
                    case 'm'
                        setmessage(sprintf('Exporting %i-model queue to ''%s.m''.',length(DMAT.Queue),fn))
                        msg=q2m(DMAT.Queue,pat,fn,DMAT.Data.Filename);
                        if ~isempty(msg)
                            errordlg(msg,'Error','on');
                        else
                            setmessage('Queue succesfully exported to M-file.')
                        end
                end
            end
        else
            errordlg('No models in queue.','Error','on');
        end

    end



%% ---------------------------------------------------------------------
%
    function loadque_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            [fn, pat] = uigetfile({'*.dmq','DMA Queues (*.dmq)';
                '*.m','M-file queue (*.m)'},'Open queue');
            if ~isempty(fn) && ischar(fn)
                if fn(end)=='m'
                    str = m2q(fullfile(pat,fn),true);
                    if isempty(str.queue)
                        errordlg(str.msg,'Error','on');
                    else
                        DMAT.Queue = str.queue;
                        if ~isempty(str.filename)
                            button = questdlg(sprintf(['Replace current '...
                                'data set with datafile found in %s?'],fn),...
                                'Replace data set?','Yes','No','No');
                            if ~isempty(button) && button(1)=='Y'
                                DMAT.Data.Filename = str.filename;
                                err=loaddata(1);
                                if ~err
                                    set(DMAT.GUIcontrols.MainWindow.filename,...
                                        'String',DMAT.Data.Filename);
                                end
                            end
                        end
                    end
                elseif fn(end)=='q'
                    dmq = load(fullfile(pat,fn),'-mat');
                    DMAT.Queue = dmq.queue;
                end
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function vieque_Callback

        hei = length(DMAT.Queue);
        if ~hei && (~isfield(DMAT,'History') || isempty(DMAT.History))
            errordlg('No models in queue.','Error','on');
        else
            DMAT.GUIcontrols.WindowHandles.View = figure(...
                'NumberTitle','off',...
                'Toolbar','None',...
                'Resize','off',...
                'Color',DMAT.GUIcontrols.ColorScheme.View,...
                'Units','normalized',...
                'Position',[.03 .5 .22 .33],...
                'MenuBar','figure',...
                'DockControls','off',...
                'WindowStyle',windowstyle,...
                'Name','Model queue');
            DMAT.GUIcontrols.ViewWindow.lb = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Listbox',...
                'String',{},...
                'Units','normalized',...
                'Position',[.04 .04 .65 .91],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.View,...
                'Max',5,...
                'Min',1);
            DMAT.GUIcontrols.ViewWindow.edit = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','Edit',...
                'Units','normalized',...
                'Position',[.74 .84 .22 .11],...
                'Callback',@(y,z)dmatgui(@vwedit_Callback));
            DMAT.GUIcontrols.ViewWindow.cpy = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','Copy',...
                'Units','normalized',...
                'Position',[.74 .7 .22 .11],...
                'Callback',@(y,z)dmatgui(@vwcpy_Callback));
            DMAT.GUIcontrols.ViewWindow.moveup = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','+',...
                'Units','normalized',...
                'Position',[.74 .59 .10 .08],...
                'Callback',@(y,z)dmatgui(@moveup_Callback));
            DMAT.GUIcontrols.ViewWindow.movedown = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','-',...
                'Units','normalized',...
                'Position',[.86 .59 .10 .08],...
                'Callback',@(y,z)dmatgui(@movedown_Callback));
            DMAT.GUIcontrols.ViewWindow.del = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','Delete',...
                'Units','normalized',...
                'Position',[.74 .46 .22 .11],...
                'Callback',@(y,z)dmatgui(@vwdel_Callback));
            DMAT.GUIcontrols.ViewWindow.clr = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','Clear all',...
                'Units','normalized',...
                'Position',[.74 .32 .22 .11],...
                'Callback',@(y,z)dmatgui(@vwclr_Callback));
            DMAT.GUIcontrols.ViewWindow.history = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','History',...
                'Units','normalized',...
                'Position',[.74 .18 .22 .11],...
                'Callback',@(y,z)dmatgui(@vwhist_Callback));
            DMAT.GUIcontrols.ViewWindow.cls = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.View,...
                'Style','Pushbutton',...
                'String','Close',...
                'Units','normalized',...
                'Position',[.74 .04 .22 .11],...
                'Callback',sprintf('close(%g)',DMAT.GUIcontrols.WindowHandles.View));
            updateviewqueue
        end

    end



%% ---------------------------------------------------------------------
%
    function vwedit_Callback

        val = get(DMAT.GUIcontrols.ViewWindow.lb,'Value');
        if length(val)>1
            beep
        else
            DMAT.CurrentModel = DMAT.Queue(val);
            DMAT.Queue(val) = [];
            setstats
            setmessage(sprintf(['Model ''%s'' removed from queue ',...
                'for editing.'],DMAT.CurrentModel.Name))
            close(DMAT.GUIcontrols.WindowHandles.View);
        end

    end



%% ---------------------------------------------------------------------
%
    function vwcpy_Callback

        val = get(DMAT.GUIcontrols.ViewWindow.lb,'Value');
        DMAT.Queue(end+(1:length(val))) = DMAT.Queue(val);
        updateviewqueue

    end



%% ---------------------------------------------------------------------
%
    function vwhist_Callback

        DMAT.Queue = [DMAT.History(:);DMAT.Queue(:)];
        %DMAT.History = [];
        updateviewqueue

    end


%% ---------------------------------------------------------------------
%
    function moveup_Callback

        val = get(DMAT.GUIcontrols.ViewWindow.lb,'Value');
        if any(val<=1) || length(val)~=1;
            beep
        else
            temp = DMAT.Queue(val-1);
            DMAT.Queue(val-1) = DMAT.Queue(val);
            DMAT.Queue(val) = temp;
            updateviewqueue
            set(DMAT.GUIcontrols.ViewWindow.lb,'Value',val-1);
        end

    end



%% ---------------------------------------------------------------------
%
    function movedown_Callback

        val = get(DMAT.GUIcontrols.ViewWindow.lb,'Value');
        tot = length(DMAT.Queue);
        if any(val>=tot) || length(val)~=1;
            beep
        else
            temp = DMAT.Queue(val+1);
            DMAT.Queue(val+1) = DMAT.Queue(val);
            DMAT.Queue(val) = temp;
            updateviewqueue
            set(DMAT.GUIcontrols.ViewWindow.lb,'Value',val+1);
        end

    end



%% ---------------------------------------------------------------------
%
    function vwdel_Callback

        r = get(DMAT.GUIcontrols.ViewWindow.lb,'Value');
        l = length(r);
        n = length(get(DMAT.GUIcontrols.ViewWindow.lb,'String'));
        if n==l
            dmatgui(@vwclr_Callback)
        else
            DMAT.Queue(r)=[];
            updateviewqueue
        end

    end



%% ---------------------------------------------------------------------
%
    function vwclr_Callback

        a = questdlg('Clear entire queue?','Are you sure?');
        if ~isempty(a) && a(1)=='Y',
            DMAT.Queue=[];
            set(DMAT.GUIcontrols.ViewWindow.lb,'String','');
            close(DMAT.GUIcontrols.WindowHandles.View);
        end

    end



%% ---------------------------------------------------------------------
%
    function updateviewqueue

        strnames = {};
        if length(DMAT.Queue)>0
            for ctr = 1:length(DMAT.Queue)
                strnames{ctr} = char(DMAT.Queue(ctr).Name);
            end
            enab = 'on';
        else
            enab = 'off';
        end
        set([DMAT.GUIcontrols.ViewWindow.clr
            DMAT.GUIcontrols.ViewWindow.del
            DMAT.GUIcontrols.ViewWindow.cpy
            DMAT.GUIcontrols.ViewWindow.movedown
            DMAT.GUIcontrols.ViewWindow.moveup
            DMAT.GUIcontrols.ViewWindow.edit],'Enable',enab)

        if ~isfield(DMAT,'History') || isempty(DMAT.History)
            set(DMAT.GUIcontrols.ViewWindow.history,'Enable','off');
        else
            set(DMAT.GUIcontrols.ViewWindow.history,'Enable','on');
        end

        set(DMAT.GUIcontrols.ViewWindow.lb,'Value',1,'String',strnames);

    end



%% ---------------------------------------------------------------------
%
    function abt_Callback

        name = 'The DMA Toolbox (v1.0)';
        DMAT.GUIcontrols.WindowHandles.About = figure(...
            'NumberTitle','off',...
            'Toolbar','None',...
            'Resize','on',...
            'Color',DMAT.GUIcontrols.ColorScheme.About,...
            'Units','normalized',...
            'Position',[.29 .39 .47 .5],...
            'MenuBar','figure',...
            'DockControls','off',...
            'WindowStyle',windowstyle,...
            'Name','About the DMA Toolbox v1.0');
        DMAT.GUIcontrols.AboutWindow.ax = axes(...
            'Units','normalized',...
            'Position',[.06 .54 .67 .43]);
        hold on
        pip = DMAT.GUIcontrols.Images.Pip;
        sedes = DMAT.GUIcontrols.Images.Sedes;
        l = sum(pip~=0);
        ctr = max(l);
        plot([0 ctr],[1 1],'k--',...
            [0 ctr],[0 0],'k',...
            [0 ctr],[-1 -1],'k--')
        l1 = 1:l(1);
        l2 = 1:l(2);
        l3 = 1:l(3);
        plot(l1,pip(l1,1),'g',l2,pip(l2,2),'r',l3,pip(l3,3),'b')
        axis([0 ctr -1.2 1.2])
        set(DMAT.GUIcontrols.AboutWindow.ax,'xtick',[])
        set(DMAT.GUIcontrols.AboutWindow.ax,'ytick',[-1 0 1])
        hold off
        view(2)
        text(20,-.80,name,'FontAngle','italic','Color',[.5 .5 .5],...
            'FontWeight','bold','FontSize',12,'FontName','Lucida Handwriting')
        text(21,-.82,name,'FontAngle','italic','Color',[.8 .0 .2],...
            'FontWeight','bold','FontSize',12,'FontName','Lucida Handwriting')
        box off
        axis off
        d = DMAT.GUIcontrols.ColorScheme.About;
        sedes = cat(3,sedes(:,:,1)*d(1),sedes(:,:,2)*d(2),sedes(:,:,3)*d(3));
        DMAT.GUIcontrols.AboutWindow.ax2 = axes(...
            'Units','normalized',...
            'Position',[.78 .6 .17 .31]);
        try
            imshow(sedes)
        end
        box off
        axis off

        [r1 r2 r3] = dmatref;

        aut = sprintf(['Author information:\n'...
            'The DMA Toolbox was created by Joachim Vandekerckhove and '...
            'Francis Tuerlinckx of the Research Group for Quantitative '...
            'and Personality Psychology of the Katholieke Universiteit '...
            'Leuven. Users of the DMA Toolbox can contact us via e-mail'...
            ', or visit our website.']);

        DMAT.GUIcontrols.AboutWindow.authtx = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.About,...
            'Style','Text',...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.About,...
            'Units','normalized',...
            'Position',[.04 .40 .95 .15],...
            'HorizontalAlignment','Left',...
            'String',aut);
        DMAT.GUIcontrols.AboutWindow.cittx = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.About,...
            'Style','Text',...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.About,...
            'Units','normalized',...
            'Position',[.04 .1 .95 .27],...
            'HorizontalAlignment','Left',...
            'String',sprintf('Citation information:\n%s\n%s\n%s',r1,r2,r3));

        DMAT.GUIcontrols.AboutWindow.sendmail = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.About,...
            'Style','PushButton',...
            'String','E-mail the authors',...
            'Units','normalized',...
            'Position',[.04 .02 .29 .07],...
            'Callback','web(''mailto:joachim.vandekerckhove@psy.kuleuven.be'', ''-browser'');');
        DMAT.GUIcontrols.AboutWindow.website = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.About,...
            'Style','PushButton',...
            'String','Visit our website',...
            'Units','normalized',...
            'Position',[.35 .02 .29 .07],...
            'Callback',sprintf('web(''%s'', ''-browser'');',dmatsite));
        DMAT.GUIcontrols.AboutWindow.tocl = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.About,...
            'Style','PushButton',...
            'String','Copy citation to clipboard',...
            'Units','normalized',...
            'Position',[.66 .02 .29 .07],...
            'Callback',sprintf('clipboard(''copy'',[''%s'' char(10) ''%s'' char(10) ''%s''])',r1,r2,r3));

    end



%% ---------------------------------------------------------------------
%
    function desp_Callback

        if ~isfield(DMAT.Data,'NCond');
            nodataseterror
            set(DMAT.GUIcontrols.MainWindow.desp,'Value',1);
        elseif DMAT.Data.NCond<=1
            errordlg(['Design restrictions require more than one '...
                'condition in the data set.'],'Design matrix','on')
        else
            val = get(DMAT.GUIcontrols.MainWindow.desp,'Value')-1;
            if val
                par = {'a','Ter','eta','z0','sZ','st','v'};
                par = par{val};
                DMAT.GUIcontrols.DesignWindow.rp = val;
                DMAT.GUIcontrols.WindowHandles.Design = figure(...
                    'NumberTitle','off',...
                    'Toolbar','None',...
                    'Resize','on',...
                    'Color',DMAT.GUIcontrols.ColorScheme.Design,...
                    'Units','normalized',...
                    'Position',[.1 .25 .25 .5],...
                    'MenuBar','figure',...
                    'DockControls','on',...
                    'WindowStyle',windowstyle,...
                    'Name',['Design matrix for ' par]);
                if isfield(DMAT.CurrentModel,'DesignMatrix') && ...
                        ~isempty(DMAT.CurrentModel.DesignMatrix)
                    fixdm
                    sho = DMAT.CurrentModel.DesignMatrix{val};
                else
                    sho = eye(DMAT.Data.NCond);
                end
                cols = size(sho,2);
                data = [num2cell(sho) ...
                    cell(DMAT.Data.NCond,DMAT.Data.NCond-cols)]; 
                labels = [num2cell(num2str((1:cols)')'),...
                    repmat({'.'},1,DMAT.Data.NCond-cols)]; 
                DMAT.GUIcontrols.DesignWindow.tbl = uitable(...
                    'Data',data,...
                    'ColumnName',labels,...
                    'Parent',DMAT.GUIcontrols.WindowHandles.Design,...
                    'ColumnWidth','auto',...
                    'units','normalized',...
                    'ColumnEditable',true,...
                    'Position',[.07 .13 .86 .80]);
                DMAT.GUIcontrols.DesignWindow.ok = uicontrol(...
                    DMAT.GUIcontrols.WindowHandles.Design,...
                    'Style','PushButton',...
                    'String','OK',...
                    'Units','Normalized',...
                    'Position',[.08 .02 .17 .06],...
                    'Callback',@(y,z)dmatgui(@dmok_Callback));
                DMAT.GUIcontrols.DesignWindow.cnl = uicontrol(...
                    DMAT.GUIcontrols.WindowHandles.Design,...
                    'Style','PushButton',...
                    'String','Cancel',...
                    'Units','Normalized',...
                    'Position',[.27 .02 .17 .06],...
                    'Callback',sprintf('close(%g)',...
                    DMAT.GUIcontrols.WindowHandles.Design));
                %                 DMAT.GUIcontrols.DesignWindow.hlp = uicontrol(...
                %                     DMAT.GUIcontrols.WindowHandles.Design,...
                %                     'Style','PushButton',...
                %                     'String','Hint',...
                %                     'Units','Normalized',...
                %                     'Position',[.46 .02 .15 .06],...
                %                     'Callback',@(y,z)dmatgui(@dmhlp_Callback));

                DMAT.GUIcontrols.DesignWindow.dflttxt = uicontrol(...
                    DMAT.GUIcontrols.WindowHandles.Design,...
                    'Style','text',...
                    'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Design,...
                    'String','Standard matrix:',...
                    'HorizontalAlignment','right',...
                    'Units','Normalized',...
                    'Position',[.46 .01 .2 .08],...
                    'Callback',@(y,z)dmatgui(@dmdflt_Callback));
                DMAT.GUIcontrols.DesignWindow.dflt = uicontrol(...
                    DMAT.GUIcontrols.WindowHandles.Design,...
                    'Style','popupmenu',...
                    'String',{'','Identity','Column'},...
                    'Units','Normalized',...
                    'Position',[.68 .02 .25 .06],...
                    'Callback',@(y,z)dmatgui(@dmdflt_Callback));
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function dmok_Callback

        err = 0;
        d=cell(get(DMAT.GUIcontrols.DesignWindow.tbl,'Data'));
        [r c] = size(d);
        dsm = [];
        for cs = 1:c
            for rs=1:r
                if ~isempty(d{rs,cs})
                    if ischar(d{rs,cs})
                        dsm(rs,cs) = str2double(d{rs,cs});
                    else
                        dsm(rs,cs) = d{rs,cs};
                    end
                else
                    dsm(rs,cs)=NaN; % flag empty cells
                end
            end
        end

        if ~isfield(DMAT.CurrentModel,'DesignMatrix') || ...
                isempty(DMAT.CurrentModel.DesignMatrix);
            DMAT.CurrentModel.DesignMatrix = repmat({'1'},1,7);
            fixdm
        end
        nns = sum(isnan(dsm),1); % count empty cells
        if any(nns~=0) % if any columns have empty cells
            if any(nns~=0&nns~=r) % and they're not all empty, bad matrix
                errordlg('Design matrix rejected: is not complete',...
                    'Error','on');
                dsm = [];
                err = 1;
            else % if they are all empty, remove colums entirely
                dsm(:,any(isnan(dsm)))=[];
            end
        end
        if rank(dsm)<size(dsm,2)
            errordlg('Design matrix rejected: is not of full rank',...
                'Error','on');
            dsm = [];
            err = 1;
        end

        if ~err
            DMAT.CurrentModel.DesignMatrix{...
                DMAT.GUIcontrols.DesignWindow.rp} = dsm;
        end
        close(DMAT.GUIcontrols.WindowHandles.Design);
        setstats

    end



%% ---------------------------------------------------------------------
%
    function dmdflt_Callback

        switch get(DMAT.GUIcontrols.DesignWindow.dflt,'Value')
            case 2
                c = num2cell(eye(DMAT.Data.NCond));
            case 3
                c = [num2cell(ones(DMAT.Data.NCond,1)) ...
                    cell(DMAT.Data.NCond,DMAT.Data.NCond-1)];
            otherwise
                return
        end
        set(DMAT.GUIcontrols.DesignWindow.tbl,'Data',c);

    end



%% ---------------------------------------------------------------------
%
    function cls_Callback

        if length(DMAT.Output)
            a = questdlg('Really quit?','Are you sure?');
            if ~isempty(a) && a(1)=='Y'
                uiresume(DMAT.GUIcontrols.WindowHandles.Main)
                try uiresume(DMAT.GUIcontrols.WindowHandles.Output)
                catch end
            else
                msg = {'Yay!','Excellent!!!','It''s hard to quit, isn''t it?',...
                    'I''m glad you decided to stay :-)',...
                    'Please don''t go. I get lonely :-(',...
                    'Phew!'};
                setmessage(msg{ceil(rand*numel(msg))})
            end
        else
            uiresume(DMAT.GUIcontrols.WindowHandles.Main)
            try uiresume(DMAT.GUIcontrols.WindowHandles.Output)
            catch end
        end

    end



%% ---------------------------------------------------------------------
%
    function setstats

        % DesignMatrix
        if isfield(DMAT.CurrentModel,'DesignMatrix') && ...
                ~isempty(DMAT.CurrentModel.DesignMatrix)
            fixdm
            ise = [];
            par = {'a','Ter','eta','z0','sZ','st','v'};
            for cpr = 1:7
                %                 if ~isempty(DMAT.CurrentModel.DesignMatrix{cpr}) && ...
                %                         ~iseye(DMAT.CurrentModel.DesignMatrix{cpr})
                %                     ise = [ise par{cpr} ' '];
                %                 end
                if ~isvector(DMAT.CurrentModel.DesignMatrix{cpr})
                    ise = [ise par{cpr} ' '];
                end
            end
            if ~isempty(ise)
                str = ['- Design on: ' ise];
                set(DMAT.GUIcontrols.MainWindow.desstat,...
                    'String',str,...
                    'ForegroundColor',[0 0 0]);
            else
                set(DMAT.GUIcontrols.MainWindow.desstat,...
                    'String','- No design matrices set',...
                    'ForegroundColor',[0 0 .5]);
            end
        else
            set(DMAT.GUIcontrols.MainWindow.desstat,...
                'String','- No design matrices set',...
                'ForegroundColor',[0 0 .5]);
        end

        % SpecificBias
        if ~isfield(DMAT.CurrentModel,'SpecificBias') || ...
                all(isempty(DMAT.CurrentModel.SpecificBias))...
                || all(isnan(DMAT.CurrentModel.SpecificBias))
            set(DMAT.GUIcontrols.MainWindow.biasstat,'String',...
                '- No specific biases set','ForegroundColor',[0 0 .5]);
        else
            set(DMAT.GUIcontrols.MainWindow.biasstat,'String',...
                '- Some specific biases set','ForegroundColor',[0 0 0]);
        end

        % OutlierTreatment
        if ~isfield(DMAT.CurrentModel,'OutlierTreatment') || ...
                isempty(DMAT.CurrentModel.OutlierTreatment)
            set(DMAT.GUIcontrols.MainWindow.otlstat,...
                'String','- No outlier treatment specified',...
                'ForegroundColor',[0 0 .5]);
            set(DMAT.GUIcontrols.MainWindow.oltr,'Value',1);
        elseif DMAT.CurrentModel.OutlierTreatment(1) == 'N',
            set(DMAT.GUIcontrols.MainWindow.otlstat,...
                'String','- Outliers not treated',...
                'ForegroundColor',[0 0 0]);
            set(DMAT.GUIcontrols.MainWindow.oltr,'Value',1);
        elseif DMAT.CurrentModel.OutlierTreatment(1) == 'E';
            set(DMAT.GUIcontrols.MainWindow.otlstat,...
                'String','- EWMA Preprocessing',...
                'ForegroundColor',[0 0 0]);
            set(DMAT.GUIcontrols.MainWindow.oltr,'Value',2);
        elseif DMAT.CurrentModel.OutlierTreatment(1) == 'M';
            set(DMAT.GUIcontrols.MainWindow.otlstat,...
                'String','- Mixed Model',...
                'ForegroundColor',[0 0 0]);
            set(DMAT.GUIcontrols.MainWindow.oltr,'Value',3);
        elseif DMAT.CurrentModel.OutlierTreatment(1) == 'B';
            set(DMAT.GUIcontrols.MainWindow.otlstat,...
                'String','- EWMA + Mixed Model',...
                'ForegroundColor',[0 0 0]);
            set(DMAT.GUIcontrols.MainWindow.oltr,'Value',4);
        elseif ~isempty(DMAT.CurrentModel.OutlierTreatment)
            set(DMAT.GUIcontrols.MainWindow.otlstat,'String',...
                sprintf('- %s:  [ %g  %g ]',...
                DMAT.CurrentModel.OutlierTreatment,...
                DMAT.CurrentModel.OutlierMin,...
                DMAT.CurrentModel.OutlierMax),...
                'ForegroundColor',[0 0 0]);
            if DMAT.CurrentModel.OutlierTreatment(1)=='A'
                set(DMAT.GUIcontrols.MainWindow.oltr,'Value',5);
            else
                set(DMAT.GUIcontrols.MainWindow.oltr,'Value',6);
            end
        end

        % FixedValues
        if ~isfield(DMAT.CurrentModel,'FixedValues'),
            set(DMAT.GUIcontrols.MainWindow.fixstat,...
                'String','- No fixes defined',...
                'ForegroundColor',[0 0 .5]);
        elseif isnan(DMAT.CurrentModel.FixedValues),
            set(DMAT.GUIcontrols.MainWindow.fixstat,...
                'String','- No fixes defined',...
                'ForegroundColor',[0 0 .5]);
        elseif isempty(DMAT.CurrentModel.FixedValues),
            set(DMAT.GUIcontrols.MainWindow.fixstat,...
                'String','- No fixes defined',...
                'ForegroundColor',[0 0 .5]);
        else
            set(DMAT.GUIcontrols.MainWindow.fixstat,...
                'String','- Some values are kept fixed',...
                'ForegroundColor',[0 0 0]);
        end

    end



%% ---------------------------------------------------------------------
%
    function fixin_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            param = {'a','Ter','eta','z0','sZ','st','v'}; 
            DMAT.GUIcontrols.WindowHandles.Fixes = figure(...
                'NumberTitle','off',...
                'Toolbar','None',...
                'Resize','on',...
                'Color',DMAT.GUIcontrols.ColorScheme.Fixes,...
                'Units','normalized',...
                'Position',[.1 .25 .32 .2],...
                'MenuBar','figure',...
                'DockControls','on',...
                'WindowStyle',windowstyle,...
                'Name','Set fix values');
            sho = cell(DMAT.Data.NCond,7);
            if isfield(DMAT.CurrentModel,'FixedValues')
                for ctr = 1:numel(DMAT.CurrentModel.FixedValues)
                    if isnan(DMAT.CurrentModel.FixedValues(ctr))
                        sho{ctr} = '';
                    else
                        sho{ctr} = ...
                            num2str(DMAT.CurrentModel.FixedValues(ctr));
                    end
                end
                sho = reshape(sho,DMAT.Data.NCond,7); 
            end 
            DMAT.GUIcontrols.FixesWindow.tbl = uitable(...
                'Data',sho,...
                'Parent',DMAT.GUIcontrols.WindowHandles.Fixes,...
                'ColumnName',param,...
                'ColumnWidth','auto',...
                'units','normalized',...
                'ColumnEditable',true,...
                'Position',[.06 .3 .86 .5]);
            DMAT.GUIcontrols.FixesWindow.ok = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Fixes,...
                'Style','PushButton',...
                'String','OK',...
                'Units','normalized',...
                'Position',[.05 .06 .15 .15],...
                'Callback',@(y,z)dmatgui(@fiok_Callback));
            DMAT.GUIcontrols.FixesWindow.cnl = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Fixes,...
                'Style','PushButton',...
                'String','Cancel',...
                'Units','normalized',...
                'Position',[.22 .06 .15 .15],...
                'Callback',sprintf('close(%g)',...
                DMAT.GUIcontrols.WindowHandles.Fixes));
        end

    end



%% ---------------------------------------------------------------------
%
    function fiok_Callback

        d=cell(get(DMAT.GUIcontrols.FixesWindow.tbl,'Data'));

        fixm = zeros(1,numel(d));
        for ps=1:numel(d);
            if isempty(d{ps})
                fixm(ps) = NaN;
            elseif ischar(d{ps})
                fixm(ps) = str2double(d{ps});
            else
                fixm(ps) = d{ps};
            end
        end
        fixm=reshape(fixm,size(d));

        if isnan(fixm);
            DMAT.CurrentModel.FixedValues=[];
        else
            DMAT.CurrentModel.FixedValues=fixm;
        end

        setstats
        close(DMAT.GUIcontrols.WindowHandles.Fixes);

    end



%% ---------------------------------------------------------------------
%
    function outputviewer_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            %% Make main window invisible
            set(DMAT.GUIcontrols.WindowHandles.Main,'Visible','off');
            % Make output window
            DMAT.GUIcontrols.OutputWindow.cdisp = [0 0];
            DMAT.GUIcontrols.WindowHandles.Output = figure(...
                'NumberTitle','off',...
                'Toolbar','None',...
                'Resize','on',...
                'Color',DMAT.GUIcontrols.ColorScheme.Output,...
                'MenuBar','figure',...
                'Units','normalized',...
                'DockControls','on',...
                'WindowStyle',windowstyle,...
                'Position',[.15 .3 .7 .5],...
                'Name','DMA Output',...
                'DeleteFcn',@(y,z)dmatgui(@reopenmain));

            % Make list boxes
            nmods = length(DMAT.Output);
            if ~nmods,
                strnames = {'No models in output list'};
                nmods=1;
                optypes={'Descriptive statistics',...
                    'Histogram plots'};
                oneorthree=1;
            else
                optypes={'Descriptive statistics',...
                    'Histogram plots',...
                    'Parameter estimates',...
                    'Standard errors',...
                    'Quantile probability plot',...
                    'Chi-by-eye',...
                    'Hessian matrix',...
                    'Model fit statistics',...
                    'Parameter plots',...
                    'Outlier Report'};
                oneorthree=3;
                strnames = {};
                for ctr = 1:nmods
                    strnames{ctr} = char(DMAT.Output(ctr).Name);
                end
            end

            DMAT.GUIcontrols.OutputWindow.lbmodel = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','ListBox',...
                'Units','Normalized',...
                'Position',[.03 .65 .21 .26],...
                'Backgroundcolor',DMAT.GUIcontrols.ColorScheme.OutputEdit,...
                'HorizontalAlignment','Left',...
                'String',strnames,...
                'Value',nmods,...
                'Callback',@(y,z)dmatgui(@displayop));
            DMAT.GUIcontrols.OutputWindow.lbtype = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','ListBox',...
                'Units','Normalized',...
                'Position',[.03 .14 .21 .41],...
                'Backgroundcolor',DMAT.GUIcontrols.ColorScheme.OutputEdit,...
                'HorizontalAlignment','Left',...
                'String',optypes,...
                'Value',oneorthree,...
                'Callback',@(y,z)dmatgui(@displayop));

            % Make panels
            DMAT.GUIcontrols.OutputWindow.lbmpnl=uipanel(...
                'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                'Title','Select model',...
                'Units','pixels',...
                'Units','Normalized',...
                'Position',[.02 .635 .23 .315],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output);
            DMAT.GUIcontrols.OutputWindow.lbtpnl=uipanel(...
                'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                'Title','Select output',...
                'Units','Normalized',...
                'Position',[.02 .125 .23 .465],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output);

            DMAT.GUIcontrols.OutputWindow.closeop = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','PushButton',...
                'String','Main Window',...
                'Units','Normalized',...
                'Position',[.03 .02 .11 .065],...
                'Callback',sprintf('close(%g)',...
                DMAT.GUIcontrols.WindowHandles.Output));
            DMAT.GUIcontrols.OutputWindow.textmode = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','PushButton',...
                'String','Text Mode',...
                'Units','Normalized',...
                'Position',[.15 .02 .11 .065],...
                'Callback',@(y,z)dmatgui(@textmode_Callback));
            DMAT.GUIcontrols.OutputWindow.saveop = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','PushButton',...
                'String','Save',...
                'Units','Normalized',...
                'Position',[.3 .02 .07 .065],...
                'Callback',@(y,z)dmatgui(@saveop_Callback));
            DMAT.GUIcontrols.OutputWindow.loadop = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','PushButton',...
                'String','Load',...
                'Units','Normalized',...
                'Position',[.375 .02 .07 .065],...
                'Callback',@(y,z)dmatgui(@loadop_Callback));
            DMAT.GUIcontrols.OutputWindow.exportop = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','PushButton',...
                'String','Export',...
                'Units','Normalized',...
                'Position',[.45 .02 .07 .065],...
                'Callback',@(y,z)dmatgui(@exportop_Callback));
            DMAT.GUIcontrols.OutputWindow.status = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','Edit',...
                'String',' Status: Ready',...
                'Units','Normalized',...
                'Position',[.725 .02 .25 .065],...
                'Backgroundcolor',[.85 .85 .85],...
                'FontName','Arial',...
                'HorizontalAlignment','Left',...
                'Enable','off');
            
            if developermode % Panic button
                DMAT.GUIcontrols.OutputWindow.resetop = uicontrol(...
                    DMAT.GUIcontrols.WindowHandles.Output,...
                    'Style','PushButton',...
                    'String','!',...
                    'Units','Normalized',...
                    'Position',[.525 .02 .03 .065],...
                    'Callback',@(y,z)dmatgui(@resetop_Callback));
            end
            dmatgui(@displayop)
        end

    end



%% ---------------------------------------------------------------------
%
    function displayop

        model=get(DMAT.GUIcontrols.OutputWindow.lbmodel,'Value');
        otype=get(DMAT.GUIcontrols.OutputWindow.lbtype,'Value');
        nmods = length(DMAT.Output);
        DMAT.GUIcontrols.OutputWindow.dcell=splitdata(DMAT.Data.Dataset,1);

        if (nmods>0 || otype<3) && ...
                ~all(DMAT.GUIcontrols.OutputWindow.cdisp==[model otype])
            DMAT.GUIcontrols.OutputWindow.cdisp=[model otype];
            if nmods
                DMAT.GUIcontrols.OutputWindow.thismod = DMAT.Output(model);
                columnlabels = {'a','Ter','eta','z','sz','st','v'};
                if DMAT.GUIcontrols.OutputWindow.thismod.Options.npar==9
                    columnlabels(8:9)={'pi','gamma'}; %#ok
                end
                set(DMAT.GUIcontrols.OutputWindow.lbmodel,'Enable','on')
            else
                set(DMAT.GUIcontrols.OutputWindow.lbmodel,'Enable','off')
            end
            removecurrent
            switch otype
                case 1
                    optitle('Descriptive statistics')
                    DMAT.GUIcontrols.OutputWindow.descrip = uitable(...
                        'Data',descriptives(DMAT.Data.Dataset),...
                        'ColumnName',{'' '','' '','' '','' ''},...
                        'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                        'ColumnWidth','auto',...
                        'Units','normalized',...
                        'Position',[.32 .19 .615 .67]);
                    DMAT.GUIcontrols.OutputWindow.current = ...
                        {DMAT.GUIcontrols.OutputWindow.descrip};
                case 2
                    optitle('Histogram plots')
                    plothist
                case 3
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
                        optitle('Parameter estimates (nonparametric bootstrap)')
                        minia = DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstrapMean;
                    elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Parameter estimates (parametric bootstrap)')
                        minia = DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstrapMean;
                    else
                        optitle('Parameter estimates')
                        minia = DMAT.GUIcontrols.OutputWindow.thismod.Minimum;
                    end
                    minia = reshape(cellstr(num2str(minia(:),'%8.5f')),...
                        size(minia));
                    DMAT.GUIcontrols.OutputWindow.parest = uitable(...
                        'Data',minia,...
                        'ColumnName',columnlabels,...
                        'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                        'ColumnWidth','auto',...
                        'Units','normalized',...
                        'Position',[.32 .19 .615 .67]);
                    DMAT.GUIcontrols.OutputWindow.current = ...
                        {DMAT.GUIcontrols.OutputWindow.parest};
                case 4
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
                        optitle('Standard errors (nonparametric bootstrap)')
                        stds = DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstrapStdErr;
                    elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Standard errors (parametric bootstrap)')
                        stds = DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstrapStdErr;
                    else
                        optitle('Standard errors')
                        stds = DMAT.GUIcontrols.OutputWindow.thismod.StdErr;
                    end
                    stds = reshape(cellstr(num2str(stds(:),'%8.5f')),size(stds));
                    DMAT.GUIcontrols.OutputWindow.stderr = uitable(...
                        'Data',stds,...
                        'ColumnName',columnlabels,...
                        'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                        'ColumnWidth','auto',...
                        'Units','normalized',...
                        'Position',[.32 .19 .615 .67]);
                    DMAT.GUIcontrols.OutputWindow.current = ...
                        {DMAT.GUIcontrols.OutputWindow.stderr};
                case 5
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
                        optitle('Quantile probability plot (nonparametric bootstrap)')
                    elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Quantile probability plot (parametric bootstrap)')
                    else
                        optitle('Quantile probability plot')
                    end
                    qpp
                case 6
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
                        optitle('Chi-by-eye (nonparametric bootstrap)')
                    elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Chi-by-eye (parametric bootstrap)')
                    else
                        optitle('Chi-by-eye')
                    end
                    cdfedf
                case 7
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0 ...
                            || DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Hessian matrix (from first bootstrap iteration)')
                    else
                        optitle('Hessian matrix')
                    end
                    hessy = DMAT.GUIcontrols.OutputWindow.thismod.Hessian;
                    hessy = reshape(cellstr(num2str(hessy(:),'%8.5f')),...
                        size(hessy)); 
                    cn = namepars(DMAT.GUIcontrols.OutputWindow.thismod,1); 
                    DMAT.GUIcontrols.OutputWindow.hessian = uitable(...
                        'Data',hessy,...
                        'ColumnName',cn',...
                        'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                        'Units','normalized',...
                        'Position',[.32 .19 .615 .67]);
                    DMAT.GUIcontrols.OutputWindow.current = ...
                        {DMAT.GUIcontrols.OutputWindow.hessian};
                case 8
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0 ||...
                            DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Model fit statistics (all models)')
                    else
                        optitle('Model fit statistics')
                    end
                    modelfitstats
                case 9
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
                        optitle('Parameter plots (nonparametric bootstrap)')
                    elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Parameter plots (parametric bootstrap)')
                    else
                        optitle('Parameter plots')
                    end
                    parameterplots
                case 10
                    if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
                        optitle('Outlier Report (nonparametric bootstrap)')
                    elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
                        optitle('Outlier Report (parametric bootstrap)')
                    else
                        optitle('Outlier Report')
                    end
                    outliertreatmentreport(...
                        DMAT.GUIcontrols.OutputWindow.thismod.Options.OutlierTreatment);
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function cond2sel_Callback

        DMAT.GUIcontrols.OutputWindow.cond2plot = ...
            get(DMAT.GUIcontrols.OutputWindow.cond2sel,'Value');
        removecurrent
        plothist

    end



%% ---------------------------------------------------------------------
%
    function cond2cdfsel_Callback
%         v = get(DMAT.GUIcontrols.OutputWindow.cond2cdfsel,'Value');
%         s = get(DMAT.GUIcontrols.OutputWindow.cond2cdfsel,'String');
%         DMAT.GUIcontrols.OutputWindow.cond2plot = str2double(s{v});
        DMAT.GUIcontrols.OutputWindow.cond2plot = ...
            get(DMAT.GUIcontrols.OutputWindow.cond2cdfsel,'Value');
        removecurrent
        cdfedf

    end



%% ---------------------------------------------------------------------
%
    function selpar2plot_Callback

        DMAT.GUIcontrols.OutputWindow.par2plot = ...
            get(DMAT.GUIcontrols.OutputWindow.selpar2plot,'Value');
        removecurrent
        parameterplots

    end



%% ---------------------------------------------------------------------
%
    function modelfitstats

        % Put table
        [mfs warns] = modelfittable(DMAT.Output);

        for a=1:length(warns)
            warns{a} = sprintf('Model %i: %s\nWarnings: %s\n',...
                a,mfs{a,1},warns{a}');
        end

        DMAT.GUIcontrols.OutputWindow.models = uitable(...
            'Data',[mfs;cell(1,6)],...
            'ColumnName',{'Model','Dev','df','AICc','BIC','LR'},...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.32 .54 .55 .32]);

        DMAT.GUIcontrols.OutputWindow.warns = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Output,...
            'Style','edit',...
            'Units','normalized',...
            'Position',[.32 .19 .55 .32],...
            'Min',1,'Max',5,...
            'String',warns,...
            'BackgroundColor',[.95 .95 .95],...
            'HorizontalAlignment','left');

        % Update current
        DMAT.GUIcontrols.OutputWindow.current = ...
            {DMAT.GUIcontrols.OutputWindow.models
            DMAT.GUIcontrols.OutputWindow.warns};

    end



%% ---------------------------------------------------------------------
%
    function plothist

        set(DMAT.GUIcontrols.OutputWindow.status,'String',...
            ' Status: Rendering histograms')

        DMAT.GUIcontrols.OutputWindow.hist1 = axes(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.33 .60 .6 .25],...
            'Color',[.975 .975 .975]);
        DMAT.GUIcontrols.OutputWindow.hist2 = axes(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.33 .22 .6 .25],...
            'Color',[.975 .975 .975]);

        DMAT.GUIcontrols.OutputWindow.cond2txt = uicontrol(...
            'Style','text',...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.595 .03 .07 .04],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
            'String','Condition:');
        DMAT.GUIcontrols.OutputWindow.cond2sel = uicontrol(...
            'Style','popupmenu',...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.667 .03 .05 .05],...
            'String',num2cell(DMAT.Data.Conditions),...
            'Value',DMAT.GUIcontrols.OutputWindow.cond2plot,...
            'BackgroundColor',[1 1 1],...
            'Callback',@(y,z)dmatgui(@cond2sel_Callback));

        % histogram X=0
        hist(DMAT.GUIcontrols.OutputWindow.hist1,...
            DMAT.GUIcontrols.OutputWindow.dcell{...
            DMAT.GUIcontrols.OutputWindow.cond2plot,1},25)
        set(DMAT.GUIcontrols.OutputWindow.hist1,'XLim',[0 5])
        xlabel(DMAT.GUIcontrols.OutputWindow.hist1,...
            'Time (seconds)','FontSize',8)
        ylabel(DMAT.GUIcontrols.OutputWindow.hist1,...
            'Freq(X=0)','FontSize',8)
        set(findobj(DMAT.GUIcontrols.OutputWindow.hist1,'Type','patch'),...
            'FaceColor',[1 0 0])

        % histogram X=1
        hist(DMAT.GUIcontrols.OutputWindow.hist2,...
            DMAT.GUIcontrols.OutputWindow.dcell{...
            DMAT.GUIcontrols.OutputWindow.cond2plot,2},25)
        set(DMAT.GUIcontrols.OutputWindow.hist2,'XLim',[0 5])
        set(findobj(DMAT.GUIcontrols.OutputWindow.hist2,'Type','patch'),...
            'FaceColor',[0 1 0])
        xlabel(DMAT.GUIcontrols.OutputWindow.hist2,'Time (seconds)','FontSize',8)
        ylabel(DMAT.GUIcontrols.OutputWindow.hist2,'Freq(X=1)','FontSize',8)

        % Fix axes
        ym=max([get(DMAT.GUIcontrols.OutputWindow.hist1,'YLim')...
            get(DMAT.GUIcontrols.OutputWindow.hist2,'YLim')]);
        set([DMAT.GUIcontrols.OutputWindow.hist1,...
            DMAT.GUIcontrols.OutputWindow.hist2],'YLim',[0 ym])

        set(DMAT.GUIcontrols.OutputWindow.status,'String',' Status: Ready.')

        % Update current
        DMAT.GUIcontrols.OutputWindow.current = ...
            {DMAT.GUIcontrols.OutputWindow.hist1
            DMAT.GUIcontrols.OutputWindow.hist2
            DMAT.GUIcontrols.OutputWindow.cond2txt
            DMAT.GUIcontrols.OutputWindow.cond2sel};

    end



%% ---------------------------------------------------------------------
%
    function cdfedf

        set(DMAT.GUIcontrols.OutputWindow.status,'String',...
            ' Status: Rendering CDFs')
        drawnow

        DMAT.GUIcontrols.OutputWindow.cdf1 = axes(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.33 .60 .6 .25],...
            'Color',[.975 .975 .975]);
        DMAT.GUIcontrols.OutputWindow.cdf2 = axes(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.33 .22 .6 .25],...
            'Color',[.975 .975 .975]);
        DMAT.GUIcontrols.OutputWindow.cond2cdftxt = uicontrol(...
            'Style','text',...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.595 .03 .07 .04],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
            'String','Condition:');
        DMAT.GUIcontrols.OutputWindow.cond2cdfsel = uicontrol(...
            'Style','popupmenu',...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.667 .03 .05 .05],...
            'String',num2cell(DMAT.Data.Conditions),...
            'Value',DMAT.GUIcontrols.OutputWindow.cond2plot,...
            'BackgroundColor',[1 1 1],...
            'Callback',@(y,z)dmatgui(@cond2cdfsel_Callback));
        
dat0 = DMAT.GUIcontrols.OutputWindow.dcell{DMAT.GUIcontrols.OutputWindow.cond2plot,1};
dat1 = DMAT.GUIcontrols.OutputWindow.dcell{DMAT.GUIcontrols.OutputWindow.cond2plot,2};
        
%         dat0 = DMAT.Data.Dataset(DMAT.Data.Dataset(:,1)==...
%             DMAT.GUIcontrols.OutputWindow.cond2plot & ...
%             DMAT.Data.Dataset(:,2)==0,3);
%         dat1 = DMAT.Data.Dataset(DMAT.Data.Dataset(:,1)==...
%             DMAT.GUIcontrols.OutputWindow.cond2plot & ...
%             DMAT.Data.Dataset(:,2)==1,3);
        N = size(dat1,1) + size(dat0,1);

        if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
            par = DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstrapMean(...
                DMAT.GUIcontrols.OutputWindow.cond2plot,:);
        elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
            par = DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstrapMean(...
                DMAT.GUIcontrols.OutputWindow.cond2plot,:);
        else
            par = DMAT.GUIcontrols.OutputWindow.thismod.Minimum(...
                DMAT.GUIcontrols.OutputWindow.cond2plot,:);
        end

        q1 = DMAT.GUIcontrols.OutputWindow.thismod.Options.yQ(...
            DMAT.GUIcontrols.OutputWindow.cond2plot,:);
        q0 = DMAT.GUIcontrols.OutputWindow.thismod.Options.nQ(...
            DMAT.GUIcontrols.OutputWindow.cond2plot,:);

        edfcdf(dat0,N,0,par,q0,DMAT.GUIcontrols.OutputWindow.cdf1)
        edfcdf(dat1,N,1,par,q1,DMAT.GUIcontrols.OutputWindow.cdf2)
        set(DMAT.GUIcontrols.OutputWindow.status,'String',...
            ' Status: Ready.')

        DMAT.GUIcontrols.OutputWindow.current = ...
            {DMAT.GUIcontrols.OutputWindow.cdf1
            DMAT.GUIcontrols.OutputWindow.cdf2
            DMAT.GUIcontrols.OutputWindow.cond2cdftxt
            DMAT.GUIcontrols.OutputWindow.cond2cdfsel};

    end



%% ---------------------------------------------------------------------
%
    function qpp

        set(DMAT.GUIcontrols.OutputWindow.status,'String',...
            ' Status: Rendering QPP')
        drawnow

        DMAT.GUIcontrols.OutputWindow.qpp = axes(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.32 .19 .575 .67],...
            'Color',[.5 .5 .5]);

        data = DMAT.Data.Dataset;
        perc = 10:20:90;

        if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
            par = DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstrapMean;
        elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
            par = DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstrapMean;
        else
            par = DMAT.GUIcontrols.OutputWindow.thismod.Minimum;
        end

        handle = DMAT.GUIcontrols.OutputWindow.qpp;

        qpplot(data,perc,par,handle)
        set(DMAT.GUIcontrols.OutputWindow.status,'String',...
            ' Status: Ready.')

        DMAT.GUIcontrols.OutputWindow.current = ...
            {DMAT.GUIcontrols.OutputWindow.qpp};

    end



%% ---------------------------------------------------------------------
%
    function parameterplots

        DMAT.GUIcontrols.OutputWindow.paramplot = axes(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.32 .19 .575 .67],...
            'Color',[.5 .5 .5]);

        if DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap>0
            par = DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstrapMean;
            errbar = DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstrapStdErr;
        elseif DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap>0
            par = DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstrapMean;
            errbar = DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstrapStdErr;
        else
            par = DMAT.GUIcontrols.OutputWindow.thismod.Minimum;
            errbar = DMAT.GUIcontrols.OutputWindow.thismod.StdErr;
        end

        handle = DMAT.GUIcontrols.OutputWindow.paramplot;

        DMAT.GUIcontrols.OutputWindow.selpartxt = uicontrol(...
            'Style','text',...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.565 .03 .07 .04],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
            'String','Parameter:');
        parlab = {'a','Ter','eta','z','sz','st','v'};
        if DMAT.GUIcontrols.OutputWindow.thismod.Options.npar==9
            parlab(8:9) = {'pi','gamma'};
        end
        DMAT.GUIcontrols.OutputWindow.selpar2plot = uicontrol(...
            'Style','popupmenu',...
            'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
            'Units','normalized',...
            'Position',[.647 .03 .07 .05],...
            'String',parlab,...
            'Value',DMAT.GUIcontrols.OutputWindow.par2plot,...
            'BackgroundColor',[1 1 1],...
            'Callback',@(y,z)dmatgui(@selpar2plot_Callback));

        paramplot(par(:,DMAT.GUIcontrols.OutputWindow.par2plot),...
            errbar(:,DMAT.GUIcontrols.OutputWindow.par2plot),handle)
        drawnow

        DMAT.GUIcontrols.OutputWindow.current = ...
            {DMAT.GUIcontrols.OutputWindow.selpartxt
            DMAT.GUIcontrols.OutputWindow.selpar2plot
            DMAT.GUIcontrols.OutputWindow.paramplot};
    end



%% ---------------------------------------------------------------------
%
    function outliertreatmentreport(method)

        removecurrent
        DMAT.GUIcontrols.OutputWindow.current = [];
        
        method = lower(method(1));
        npb = DMAT.GUIcontrols.OutputWindow.thismod.Options.NonparametricBootstrap;
        pb = DMAT.GUIcontrols.OutputWindow.thismod.Options.ParametricBootstrap;

        if npb||pb % bootstrap case
            if npb>0
                oltrreps = [DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstraps.OutlierReport];
                mixpars = cat(3,DMAT.GUIcontrols.OutputWindow.thismod.NonparametricBootstraps.Minimum);
            elseif pb>0
                oltrreps = [DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstraps.OutlierReport];
                mixpars = cat(3,DMAT.GUIcontrols.OutputWindow.thismod.ParametricBootstraps.Minimum);
            end
            if size(mixpars,2)==9
                pis = mean(squeeze(mixpars(:,8,:)),2);
                gammas = mean(squeeze(mixpars(:,9,:)),2);
            end
            cutoff = mean([oltrreps.cutoff]);
            used = mean(vertcat(oltrreps.used));
            oltrmax = mean([oltrreps.OutlierMax]);
            oltrmin = mean([oltrreps.OutlierMin]);
        else
            if size(DMAT.GUIcontrols.OutputWindow.thismod.Minimum,2)==9
                pis = DMAT.GUIcontrols.OutputWindow.thismod.Minimum(:,8);
                gammas = DMAT.GUIcontrols.OutputWindow.thismod.Minimum(:,9);
            end
            cutoff = DMAT.GUIcontrols.OutputWindow.thismod.OutlierReport.cutoff;
            used = DMAT.GUIcontrols.OutputWindow.thismod.OutlierReport.used;
            oltrmax = DMAT.GUIcontrols.OutputWindow.thismod.OutlierReport.OutlierMax;
            oltrmin = DMAT.GUIcontrols.OutputWindow.thismod.OutlierReport.OutlierMin;
        end

        removecurrent
        switch method
            case 'n'
                putoltrtext('No outlier treatment was requested.')
            case 'e'
                showewma
            case 'm'
                showmms
            case 'b'
                putoltrtext('Choose EWMA or Mixture Model results.')
                showchoicebuttons
            case 'a'
                putoltrtext('Absolute cut-offs were requested.')
                showedges
            case 'r'
                putoltrtext('Relative cut-offs were requested.')
                showedges
        end

        function putoltrtext(s)
            DMAT.GUIcontrols.OutputWindow.oltrmeth = uicontrol(...
                'Style','text',...
                'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                'Units','normalized',...
                'FontWeight','bold',...
                'Position',[.3 .725 .4 .1],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
                'String',s);
            DMAT.GUIcontrols.OutputWindow.current = ...
                [DMAT.GUIcontrols.OutputWindow.current;
                {DMAT.GUIcontrols.OutputWindow.oltrmeth}];
        end
        
        function showewma
            removecurrent
            showused
            showcutoff
            if ~(pb||npb)
                DMAT.GUIcontrols.OutputWindow.ewmaplot = axes(...
                    'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                    'Units','normalized',...
                    'Position',[.32 .19 .5 .6],...
                    'Color',[.5 .5 .5]);
                plotewma(...
                    DMAT.GUIcontrols.OutputWindow.thismod.OutlierReport.EWMAplot,...
                    DMAT.GUIcontrols.OutputWindow.ewmaplot);
            else % bootstrap case
                DMAT.GUIcontrols.OutputWindow.ewmaplot = uicontrol(...
                    'Style','text',...
                    'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                    'Units','normalized',...
                    'FontWeight','bold',...
                    'Position',[.45 .45 .3 .1],...
                    'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
                    'String','Can''t display EWMA plot for bootstraps.');
            end
            DMAT.GUIcontrols.OutputWindow.current = ...
                [DMAT.GUIcontrols.OutputWindow.current;
                {DMAT.GUIcontrols.OutputWindow.ewmaplot}];
        end

        function showmms
            removecurrent
            showused
            showcutoff
            sho = [pis gammas];
            sho = reshape(cellstr(num2str(sho(:),'%8.5f')),size(sho));
            DMAT.GUIcontrols.OutputWindow.mixpars = uitable(...
                'Data',[sho;cell(1,2)],...
                'ColumnName',{'pi','gamma'},...
                'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                'Units','normalized',...
                'Position',[.32 .19 .5 .6]);
            DMAT.GUIcontrols.OutputWindow.current = ...
                [DMAT.GUIcontrols.OutputWindow.current;
                {DMAT.GUIcontrols.OutputWindow.mixpars}];
        end

        function showchoicebuttons
            showused
            showcutoff
            DMAT.GUIcontrols.OutputWindow.ewmabutton = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','PushButton',...
                'String','EWMA',...
                'Units','normalized',...
                'Position',[.42 .55 .10 .07],...
                'Callback',@(x,y)showewma);
            DMAT.GUIcontrols.OutputWindow.mmsbutton = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','PushButton',...
                'String','Mixed model',...
                'Units','normalized',...
                'Position',[.54 .55 .10 .07],...
                'Callback',@(x,y)showmms);
            DMAT.GUIcontrols.OutputWindow.current = ...
                [DMAT.GUIcontrols.OutputWindow.current;
                {DMAT.GUIcontrols.OutputWindow.mmsbutton;
                DMAT.GUIcontrols.OutputWindow.ewmabutton}];            
        end
        
        function showused
            DMAT.GUIcontrols.OutputWindow.usedtxt = uicontrol(...
                'Style','text',...
                'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'Position',[.84 .63 .08 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
                'String','Used data');
            DMAT.GUIcontrols.OutputWindow.used = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','edit',...
                'Units','normalized',...
                'FontName','monospace',...
                'Position',[.83 .19 .15 .45],...
                'HorizontalAlignment','left',...
                'BackgroundColor',[1 1 1],...
                'Min',1,...
                'Max',5,...
                'String',sprintf('%2i: %6.2f%%\n',[1:DMAT.Data.NCond;used]));
            DMAT.GUIcontrols.OutputWindow.current = ...
                [DMAT.GUIcontrols.OutputWindow.current;
                {DMAT.GUIcontrols.OutputWindow.usedtxt;
                DMAT.GUIcontrols.OutputWindow.used}];
        end
        
        function showcutoff
            DMAT.GUIcontrols.OutputWindow.cutofftxt = uicontrol(...
                'Style','text',...
                'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'Position',[.84 .76 .08 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
                'String','Cut-off');
            DMAT.GUIcontrols.OutputWindow.cutoff = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','edit',...
                'Units','normalized',...
                'FontName','monospace',...
                'Position',[.83 .7 .13 .07],...
                'HorizontalAlignment','left',...
                'BackgroundColor',[1 1 1],...
                'String',sprintf('%9.4f sec',cutoff));
            DMAT.GUIcontrols.OutputWindow.current = ...
                [DMAT.GUIcontrols.OutputWindow.current;
                {DMAT.GUIcontrols.OutputWindow.cutofftxt;
                DMAT.GUIcontrols.OutputWindow.cutoff}];
        end
        
        function showedges
            showused
            showcutoff
            DMAT.GUIcontrols.OutputWindow.edgestxt = uicontrol(...
                'Style','text',...
                'Parent',DMAT.GUIcontrols.WindowHandles.Output,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'Position',[.45 .55 .3 .1],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
                'String','Edges');
            DMAT.GUIcontrols.OutputWindow.edges = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Output,...
                'Style','edit',...
                'Units','normalized',...
                'FontName','monospace',...
                'Position',[.45 .45 .3 .1],...
                'HorizontalAlignment','left',...
                'BackgroundColor',[1 1 1],...
                'Min',1,...
                'Max',5,...
                'String',sprintf('Lower: %9.4f sec\nUpper:  %9.4f sec',oltrmin,oltrmax));
            DMAT.GUIcontrols.OutputWindow.current = ...
                [DMAT.GUIcontrols.OutputWindow.current;
                {DMAT.GUIcontrols.OutputWindow.edgestxt;
                DMAT.GUIcontrols.OutputWindow.edges}];
        end
        
    end



%% ---------------------------------------------------------------------
%
    function removecurrent

        if isfield(DMAT.GUIcontrols.OutputWindow,'current')
            for ctr=1:length(DMAT.GUIcontrols.OutputWindow.current)
                if ishandle(DMAT.GUIcontrols.OutputWindow.current{ctr})
                    cc=[];
                    if ~isa(DMAT.GUIcontrols.OutputWindow.current{ctr},...
                            DMAT.GUIcontrols.uitableclass)
                        cc=get(...
                            DMAT.GUIcontrols.OutputWindow.current{ctr},...
                            'Children');
                        if iscell(cc)
                            cc=cell2mat(cc(~cellfun('isempty',cc)));
                        end
                    end
                    for ctr2=1:length(cc)
                        delete(cc(ctr2));
                    end
                    delete(DMAT.GUIcontrols.OutputWindow.current{ctr})
                end
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function optitle(inp)

        if isfield(DMAT.GUIcontrols.OutputWindow,'title') ...
                && ishandle(DMAT.GUIcontrols.OutputWindow.title)
            delete(DMAT.GUIcontrols.OutputWindow.title)
        end
        if nargin
            DMAT.GUIcontrols.OutputWindow.title = uicontrol(...
                'Style','text',...
                'String',inp,...
                'HorizontalAlignment','Left',...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Output,...
                'Units','normalized',...
                'Position',[.38 .88 .5 .06]);
            set(DMAT.GUIcontrols.OutputWindow.title,...
                'FontSize',11,...
                'FontAngle','italic',...
                'FontWeight','bold')
        end

    end



%% ---------------------------------------------------------------------
%
    function displayres

        msg = '';
        for ctr = 1:length(DMAT.Output)
            min = DMAT.Output(ctr).Minimum;
            ste = real(DMAT.Output(ctr).StdErr);
            npar = size(min,2);
            fval = DMAT.Output(ctr).Fitvalue;
            time = DMAT.Output(ctr).Time;
            war = DMAT.Output(ctr).Warnings;
            name = DMAT.Output(ctr).Name;
            used = DMAT.Output(ctr).OutlierReport.used;
            ns = size(min,1);

            msgp1 = [' -------------------\n Result of the DMA:\n --------',...
                '-----------\n\n  Parameters found:\n                       ',...
                'a      Ter      eta        z       sZ       st       v'];
            if npar==9, msgp1 = [msgp1 '       pi    gamma']; end
            msgp1 = [msgp1 '    %%used\n'];
            msgp2 = '';
            for cond = 1:ns
                msgp2t = sprintf(['  Condition %2u:  %7.4f  %7.4f  %7.4f  ',...
                    '%7.4f  %7.4f  %7.4f  %7.4f'],cond,min(cond,1:7));
                if npar==9
                    msgp2t = [msgp2t sprintf('  %7.4f  %7.4f',min(cond,8:9))];
                end
                msgp2t = [msgp2t sprintf('  %7.2f',used(cond))];
                msgp2 = [msgp2 msgp2t '\n'];
                msgp2t = sprintf(['                 (%6.4f) (%6.4f) (%6.4f)',...
                    ' (%6.4f) (%6.4f) (%6.4f) (%6.4f)'],ste(cond,1:7));
                if npar==9
                    msgp2t = [msgp2t sprintf(' (%6.4f) (%6.4f)',ste(cond,8:9))];
                end
                msgp2 = [msgp2 msgp2t '\n'];
            end

            msgp3 = sprintf(['\n  X? = %f\n  Total time spent on %s: ',...
                '%5.3f seconds.'],fval,name,time);
            msgp4 = sprintf('\n  Warnings: %s',war{:});
            msg = [msg msgp1 msgp2 msgp3 msgp4 '\n\n\n'];
        end
        fprintf(msg);
        drawnow

    end



%% ---------------------------------------------------------------------
%
    function saveop_Callback

        [fn, pat] = uiputfile({'*.dmo','DMA Output (*.dmo)'},...
            'Save output as','MyDMAoutput');
        if ~isempty(fn) && ischar(fn)
            data = DMAT.Data.Dataset; %#ok
            output=DMAT.Output; %#ok
            save([pat fn],'output','data');
        end

    end


%% ---------------------------------------------------------------------
%
    function loadop_Callback

        [fn, pat] = uigetfile({'*.dmo','DMA Output (*.dmo)'},...
            'Load output file');
        if ~isempty(fn) && ischar(fn)
            dmo = load('-mat',[pat fn]);
            if ~isfield(dmo,'output') || ~isfield(dmo,'data')
                errordlg('This is not a valid DMAT output file.',...
                    'Error','on')
            else
                DMAT.Output = dmo.output;
                if isnumeric(dmo.data)
                    DMAT.Data.Dataset = dmo.data;
                    DMAT.Data.Conditions = unique(dmo.data(:,1));
                    DMAT.Data.NCond = length(DMAT.Data.Conditions);
                    DMAT.Data.N = size(dmo.data,1);
                else
                    DMAT.Data.NCond = numel(dmo.data);
                    DMAT.Data.Conditions = 1:DMAT.Data.NCond;
                    co = vertcat(dmo.data.CorrectObs);
                    nco = sum(co,2);
                    eo = vertcat(dmo.data.IncorrectObs);
                    neo = sum(eo,2);
                    DMAT.Data.N = sum([nco;neo]);
                    DMAT.Data.Dataset = [];
                    for cn = 1:DMAT.Data.NCond
                        add = [repmat(cn,nco(cn)+neo(cn),1) [ones(nco(cn),1); zeros(neo(cn),1)]];
                        DMAT.Data.Dataset = [DMAT.Data.Dataset;add];
                    end
                    bins = [vertcat(dmo.data.CorrectEdges)
                        vertcat(dmo.data.IncorrectEdges)];
                    DMAT.Data.Dataset(:,3) = mean(bins(:));
                end
                close(DMAT.GUIcontrols.WindowHandles.Output)
                outputviewer_Callback
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function exportop_Callback

        otype = get(DMAT.GUIcontrols.OutputWindow.lbtype,'Value');

        if ismember(otype,[2 5 6 9])
            figlist = findobj([DMAT.GUIcontrols.OutputWindow.current{:}],...
                'Type','axes');
            for a=1:length(figlist)
                newhandle = copyobj(figlist(a),figure);
                set(newhandle,'Position',[.13 .11 .775 .815])
            end
        else
            set(DMAT.GUIcontrols.OutputWindow.status,'String',...
                'Exporting to XLS...')
            drawnow
            [fn, pat] = uiputfile({'*.xls','Microsoft Excel Spreadsheet (*.xls)'},...
                'Export output to','MyExportedDMAoutput');
            if ~isempty(fn) && ischar(fn)
                outputtoxls(DMAT.Data.Dataset,DMAT.Output,fullfile(pat,fn));
            end
            set(DMAT.GUIcontrols.OutputWindow.status,'String',...
                ' Status: Ready.')
            drawnow
        end
    end



%% ---------------------------------------------------------------------
%
    function resetop_Callback

        close(DMAT.GUIcontrols.WindowHandles.Output)
        outputviewer_Callback

    end



%% ---------------------------------------------------------------------
%
    function exitop_Callback

        if length(DMAT.CurrentModel)
            a = questdlg('Really quit?','Are you sure?');
            if ~isempty(a) && a(1)=='Y'
                uiresume(DMAT.GUIcontrols.WindowHandles.Main)
            end
        else
            uiresume(DMAT.GUIcontrols.WindowHandles.Main)
        end

    end



%% ---------------------------------------------------------------------
%
    function go

        outputviewer_Callback
        bestfit = Inf;
        bestguess = [];
        nmod = length(DMAT.Queue);
        set(DMAT.GUIcontrols.OutputWindow.status,...
            'String',' Status: Estimating parameters');
        set([DMAT.GUIcontrols.OutputWindow.closeop,...
            DMAT.GUIcontrols.OutputWindow.saveop,...
            DMAT.GUIcontrols.OutputWindow.exportop,...
            DMAT.GUIcontrols.OutputWindow.loadop,...
            DMAT.GUIcontrols.OutputWindow.textmode],'Enable','off');
        drawnow
        data = DMAT.Data.Dataset;
        queue = DMAT.Queue;
        trysaving = 1;
        try
            save('~$lastqueue','queue')
        catch
            warning('DMAT:runqueue:noWritingPrivileges',...
                ['Runtime back-up procedure failed.\nYou are advised to check ',...
                'your disk access rights.\nIt is safer to run DMAT in a direct',...
                'ory where it can make runtime back-ups.'])
            trysaving = 0;
        end

        for ctr=1:nmod;
            fprintf('        Starting model %i of %i: %s\n',...
                ctr,nmod,queue(1).Name);

            if isempty(queue(1).Guess)
                queue(1).Guess = bestguess;
            end
            drawnow
            no = multiestv4(data,queue(1));
            no.Options = rmfield(no.Options,'objecfun');
            DMAT.Output = [DMAT.Output no];
            displayres

            nmods = length(DMAT.Output);
            set(DMAT.GUIcontrols.OutputWindow.lbtype,...
                'String',{'Descriptive statistics',...
                'Histogram plots',...
                'Parameter estimates',...
                'Standard errors',...
                'Quantile probability plot',...
                'Chi-by-eye',...
                'Hessian matrix',...
                'Model fit statistics',...
                'Parameter plots',...
                'Outlier Report'},'Value',3);

            strnames = {};
            for ccc = 1:nmods
                strnames{ccc} = char(DMAT.Output(ccc).Name);
            end

            set(DMAT.GUIcontrols.OutputWindow.lbmodel,...
                'String',strnames,...
                'Value',nmods);
            displayop
            drawnow

            output = DMAT.Output; %#ok
            if trysaving,save('~$queuetemp','output','data'),end
            if DMAT.Output(ctr).Fitvalue<bestfit
                bestfit = DMAT.Output(ctr).Fitvalue;
                bestguess = DMAT.Output(ctr).Minimum;
            end
            DMAT.History = [DMAT.History queue(1)];
            queue(1) = [];
        end
        DMAT.Queue = [];

        set(DMAT.GUIcontrols.OutputWindow.status,'String',' Status: Ready');
        set([DMAT.GUIcontrols.OutputWindow.closeop,...
            DMAT.GUIcontrols.OutputWindow.saveop,...
            DMAT.GUIcontrols.OutputWindow.exportop,...
            DMAT.GUIcontrols.OutputWindow.loadop,...
            DMAT.GUIcontrols.OutputWindow.textmode],'Enable','on');

        nmods = length(DMAT.Output);
        strnames = {};
        for ctr = 1:nmods
            strnames{ctr} = char(DMAT.Output(ctr).Name);
        end

        set(DMAT.GUIcontrols.OutputWindow.lbmodel,...
            'String',strnames,...
            'Value',nmods);

        disp('Ready.')
        drawnow
        uiwait(DMAT.GUIcontrols.WindowHandles.Output);

    end



%% ---------------------------------------------------------------------
%
    function advanced_Callback

        if ~isfield(DMAT.Data,'NCond');
            nodataseterror
        else
            %close all
            DMAT.GUIcontrols.AdvancedWindow.t.Percentiles = ...
                DMAT.CurrentModel.Percentiles;
            DMAT.GUIcontrols.AdvancedWindow.t.FixedBinEdges = ...
                DMAT.CurrentModel.FixedBinEdges;
            DMAT.GUIcontrols.AdvancedWindow.t.EstimationMethodScalar = ...
                DMAT.CurrentModel.EstimationMethodScalar;

            if ~isfield(DMAT.GUIcontrols.AdvancedWindow.t,'Guess') && ...
                    isfield(DMAT.CurrentModel,'Guess') && ...
                    ~isempty(DMAT.CurrentModel.Guess)
                DMAT.GUIcontrols.AdvancedWindow.t.Guess = ...
                    DMAT.CurrentModel.Guess;
            elseif ~isfield(DMAT.GUIcontrols.AdvancedWindow.t,'Guess')
                dcel = splitdata(DMAT.Data.Dataset);
                for ctr = 1:DMAT.Data.NCond
                    [v,a,Ter] = ezdiff(dcel{ctr});
                    if Ter<=0, Ter = .3; end
                    DMAT.GUIcontrols.AdvancedWindow.t.Guess(ctr,:) = ...
                        [a Ter .2 a/2 .45*a .9*Ter v];
                end
            end

            DMAT.GUIcontrols.WindowHandles.Advanced = figure(...
                'NumberTitle','off',...
                'Toolbar','None',...
                'Resize','on',...
                'Color',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'Units','normalized',...
                'Position',[.01 .4 .33 .4],...
                'MenuBar','figure',...
                'DockControls','on',...
                'WindowStyle',windowstyle,...
                'Name','Advanced options');

            DMAT.GUIcontrols.AdvancedWindow.objpnl = uipanel(...
                'Parent',DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Title','Minimization algorithm options',...
                'Units','normalized',...
                'Position',[.02 .5 .96 .47],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced);
            DMAT.GUIcontrols.AdvancedWindow.bootpnl = uipanel(...
                'Parent',DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Title','Bootstrap options',...
                'Units','normalized',...
                'Position',[.02 .31 .96 .17],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced);
            DMAT.GUIcontrols.AdvancedWindow.colpnl = uipanel(...
                'Parent',DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Title','Visual effects options',...
                'Units','normalized',...
                'Position',[.02 .13 .96 .16],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced);

            DMAT.GUIcontrols.AdvancedWindow.estmtx = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','Evaluation method:',...
                'Units','normalized',...
                'Position',[.05 .84 .3 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.estmin = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','popupmenu',...
                'String',{...
                'X2, Default bins',...
                'X2, User-defined percentiles',...
                'X2, User-defined bins',...
                'MLF, Default bins',...
                'MLF, User-defined percentiles',...
                'MLF, User-defined bins'},...
                'Units','normalized',...
                'Position',[.35 .855 .6 .05],...
                'BackgroundColor',[1 1 1],...
                'Value',DMAT.CurrentModel.EstimationMethodScalar-1,...
                'Callback',@(y,z)dmatgui(@estmin_Callback));
            DMAT.GUIcontrols.AdvancedWindow.simprestxt = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','Number of short simplex runs:',...
                'Units','normalized',...
                'Position',[.05 .74 .45 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.simpresins = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','Edit',...
                'String',num2str(DMAT.CurrentModel.ShortSimplexRuns),...
                'Units','normalized',...
                'Position',[.53 .735 .07 .07],...
                'BackgroundColor',[1 1 1]);
            DMAT.GUIcontrols.AdvancedWindow.simprestxtl = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','Long runs:',...
                'Units','normalized',...
                'Position',[.68 .74 .20 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.simpresinl = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','Edit',...
                'String',num2str(DMAT.CurrentModel.LongSimplexRuns),...
                'Units','normalized',...
                'Position',[.88 .735 .07 .07],...
                'BackgroundColor',[1 1 1]);
            DMAT.GUIcontrols.AdvancedWindow.simpitertxt = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','Max. number of iterations of long simplex runs:',...
                'Units','normalized',...
                'Position',[.05 .64 .7 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.simpiterin = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','edit',...
                'String',num2str(DMAT.CurrentModel.MaxIter),...
                'Units','normalized',...
                'Position',[.75 .635 .20 .07],...
                'BackgroundColor',[1 1 1]);
            DMAT.GUIcontrols.AdvancedWindow.guesstxt = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','Initial guess generation:',...
                'Units','normalized',...
                'Position',[.05 .54 .4 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.guess = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','popupmenu',...
                'String',{'EZDIFF autogeneration','Perturbed EZDIFF','User input'},...
                'Units','normalized',...
                'Position',[.42 .555 .53 .05],...
                'BackgroundColor',[1 1 1],...
                'Value',DMAT.CurrentModel.GuessMethodScalar,...
                'Callback',@(y,z)dmatgui(@guess_Callback));

            parametric = DMAT.CurrentModel.ParametricBootstrap>0;
            nonparametric = DMAT.CurrentModel.NonparametricBootstrap>0;

            DMAT.GUIcontrols.AdvancedWindow.btypetx = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','Bootstrap type:',...
                'Units','normalized',...
                'Position',[.05 .34 .23 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.btypein = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','popupmenu',...
                'String',{'Nonparametric','Parametric'},...
                'Units','normalized',...
                'Position',[.29 .34 .28 .07],...
                'Value',parametric+1,...
                'BackgroundColor',[1 1 1]);

            if nonparametric
                curval = DMAT.CurrentModel.NonparametricBootstrap;
            elseif parametric
                curval = DMAT.CurrentModel.ParametricBootstrap;
            else
                curval = 0;
            end
            DMAT.GUIcontrols.AdvancedWindow.bitertx = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','Iterations:',...
                'Units','normalized',...
                'Position',[.62 .34 .15 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.biterin = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','Edit',...
                'String',num2str(curval),...
                'Units','normalized',...
                'Position',[.78 .34 .17 .07],...
                'BackgroundColor',[1 1 1]);

            DMAT.GUIcontrols.AdvancedWindow.colschtxt = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','text',...
                'String','GUI color scheme:',...
                'Units','normalized',...
                'Position',[.05 .16 .28 .05],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'HorizontalAlignment','left');
            DMAT.GUIcontrols.AdvancedWindow.colsch = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','popupmenu',...
                'String',fieldnames(load('clr.schms','-mat')),...
                'Units','normalized',...
                'Position',[.33 .15 .28 .07],...
                'BackgroundColor',[1 1 1],...
                'Value',1,...
                'Callback',@(y,z)dmatgui(@colsch_Callback));

            DMAT.GUIcontrols.AdvancedWindow.ok = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','PushButton',...
                'String','OK',...
                'Units','normalized',...
                'Position',[.03 .02 .15 .08],...
                'Callback',@(y,z)dmatgui(@advok_Callback));
            DMAT.GUIcontrols.AdvancedWindow.cnl = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Advanced,...
                'Style','PushButton',...
                'String','Cancel',...
                'Units','normalized',...
                'Position',[.20 .02 .15 .08],...
                'Callback',sprintf('close(%g)',...
                DMAT.GUIcontrols.WindowHandles.Advanced));
        end

    end



%% ---------------------------------------------------------------------
%
    function guess_Callback

        if get(DMAT.GUIcontrols.AdvancedWindow.guess,'Value')==3
            DMAT.GUIcontrols.WindowHandles.Guess = figure(...
                'NumberTitle','off',...
                'Toolbar','None',...
                'Resize','off',...
                'Color',DMAT.GUIcontrols.ColorScheme.Advanced,...
                'Name','User guess',...
                'DockControls','off',...
                'MenuBar','figure',...
                'Units','normalized',...
                'WindowStyle',windowstyle,...
                'Position',[.05 .65 .35 .25]);

            DMAT.GUIcontrols.GuessWindow.guesspnl = uipanel(...
                'Parent',DMAT.GUIcontrols.WindowHandles.Guess,...
                'Title','Input an initial guess',...
                'Units','normalized',...
                'Position',[.025 .025 .95 .95],...
                'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced);

            p = DMAT.GUIcontrols.AdvancedWindow.t.Guess;
            [r c] = size(p);
            cl = mat2cell(p,ones(1,r),ones(c,1));
            cl = eachcell(@(x)num2str(x,'%4.3f'),cl);

            DMAT.GUIcontrols.GuessWindow.partbl = uitable(...
                'Data',cl,...
                'ColumnName',{'a', 'Ter', 'eta', 'z', 'sZ', 'st', 'v'},...
                'Parent',DMAT.GUIcontrols.WindowHandles.Guess,...
                'ColumnWidth','auto',...
                'ColumnEditable',true,...
                'Units','Normalized',...
                'Position',[.05 .28 .9 .6]);

            DMAT.GUIcontrols.GuessWindow.storeguess = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Guess,...
                'Style','Pushbutton',...
                'Units','normalized',...
                'Position',[.05 .1 .25 .13],...
                'String','Store guess',...
                'Callback',@(y,z)dmatgui(@storeguess_Callback));

            DMAT.GUIcontrols.GuessWindow.guessclose = uicontrol(...
                DMAT.GUIcontrols.WindowHandles.Guess,...
                'Style','Pushbutton',...
                'Units','normalized',...
                'Position',[.32 .1 .13 .13],...
                'String','Close',...
                'Callback',sprintf('close(%g)',...
                DMAT.GUIcontrols.WindowHandles.Guess));

        end

    end



%% ---------------------------------------------------------------------
%
    function storeguess_Callback

        d = cell(get(DMAT.GUIcontrols.GuessWindow.partbl,'Data'));
        if any(any(~cellfun('length',d)))
            errordlg('You need to input values for all parameters.',...
                'Error','on');
        else
            try
                pars = str2num(char(d(:,1:7))); %#ok
                pars = reshape(pars,numel(pars)/7,7);
                [b p]=isgood(pars);
                d(p)={'NaN'}; %#ok
            catch
                b=false;
            end
            if ~b
                errordlg('This is not a valid parameter set.',...
                    'Error','on');
                delete(DMAT.GUIcontrols.GuessWindow.partbl);
                DMAT.GUIcontrols.GuessWindow.partbl = uitable(...
                    'Data',d,...
                    'ColumnName',{'a', 'Ter', 'eta', 'z', 'sZ', 'st', 'v'},...
                    'Parent',DMAT.GUIcontrols.WindowHandles.Guess,...
                    'ColumnWidth','auto',...
                    'Units','Normalized',...
                    'ColumnEditable',true,...
                    'Position',[.05 .28 .9 .6]);
            else
                DMAT.Guicontrols.AdvancedWindow.t.Guess = pars;
                close(DMAT.GUIcontrols.WindowHandles.Guess)
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function advok_Callback

        DMAT.CurrentModel.Percentiles = ...
            DMAT.GUIcontrols.AdvancedWindow.t.Percentiles;
        DMAT.CurrentModel.FixedBinEdges = ...
            DMAT.GUIcontrols.AdvancedWindow.t.FixedBinEdges;
        DMAT.CurrentModel.EstimationMethodScalar = ...
            DMAT.GUIcontrols.AdvancedWindow.t.EstimationMethodScalar;
        DMAT.CurrentModel.ShortSimplexRuns = str2double(...
            get(DMAT.GUIcontrols.AdvancedWindow.simpresins,'String'));
        DMAT.CurrentModel.LongSimplexRuns = str2double(...
            get(DMAT.GUIcontrols.AdvancedWindow.simpresinl,'String'));
        DMAT.CurrentModel.MaxIter = str2double(...
            get(DMAT.GUIcontrols.AdvancedWindow.simpiterin,'String'));
        if get(DMAT.GUIcontrols.AdvancedWindow.btypein,'Value')==2
            DMAT.CurrentModel.ParametricBootstrap = str2double(...
                get(DMAT.GUIcontrols.AdvancedWindow.biterin,'String'));
            DMAT.CurrentModel.NonparametricBootstrap = 0;
        else
            DMAT.CurrentModel.ParametricBootstrap = 0;
            DMAT.CurrentModel.NonparametricBootstrap = str2double(...
                get(DMAT.GUIcontrols.AdvancedWindow.biterin,'String'));
        end
        gm = get(DMAT.GUIcontrols.AdvancedWindow.guess,'Value');
        if gm==3
            DMAT.CurrentModel.GuessMethodScalar = 1;
            DMAT.CurrentModel.Guess = ...
                DMAT.GUIcontrols.AdvancedWindow.t.Guess;
        else
            DMAT.CurrentModel.Guess = [];
            DMAT.CurrentModel.GuessMethodScalar = gm;
        end

        close(DMAT.GUIcontrols.WindowHandles.Advanced)

    end



%% ---------------------------------------------------------------------
%
    function estmin_Callback

        val = get(DMAT.GUIcontrols.AdvancedWindow.estmin,'Value');
        DMAT.GUIcontrols.AdvancedWindow.t.EstimationMethodScalar = val+1;
        if val==2||val==5
            dl = inputdlg(...
                {['Enter percentiles for correct answers (in percentages ',...
                '0<p<100)'],['Enter percentiles for false answers (or leave ',...
                'blank to use the above)']},'Estimation method',1,...
                {num2str(DMAT.GUIcontrols.AdvancedWindow.t.Percentiles(1,:));...
                num2str(DMAT.GUIcontrols.AdvancedWindow.t.Percentiles(2,:))});
            if ~isempty(dl)
                yP = str2num(char(dl(1))); %#ok
                nP = str2num(char(dl(2))); %#ok
                if length(yP)~=length(nP)
                    if length(nP), restrictwarn, end
                    nP=yP;
                end
                if any([nP yP]>=100) || any([nP yP]<=0)
                    errordlg(['These values must be between 0 and 100 '...
                        '(exclusive). Your entries have been deleted.'],...
                        'Error','On');
                else
                    DMAT.GUIcontrols.AdvancedWindow.t.Percentiles = [yP;nP];
                end
            end
        elseif val==3||val==6
            dl = inputdlg(...
                {'Enter bin edges for correct answers (in seconds)',...
                ['Enter bin edges for false answers (or leave blank ',...
                'to use the above)']},'Estimation method',1,...
                {num2str(DMAT.GUIcontrols.AdvancedWindow.t.FixedBinEdges(1,:));...
                num2str(DMAT.GUIcontrols.AdvancedWindow.t.FixedBinEdges(2,:))});
            if ~isempty(dl)
                yQ = str2num(char(dl(1))); %#ok
                nQ = str2num(char(dl(2))); %#ok
                if length(yQ)~=length(nQ)
                    if length(nQ), restrictwarn, end
                    nQ=yQ;
                end
                if any([nQ yQ]<=0)
                    errordlg(['These values must be strictly positive.',...
                        ' Your entries have been deleted.'],'Error','On');
                else
                    DMAT.GUIcontrols.AdvancedWindow.t.FixedBinEdges = [yQ;nQ];
                end
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function defaults_Callback

        DMAT.CurrentModel = multiestv4;
        setmessage('Defaults reset.')
        setstats

    end



%% ---------------------------------------------------------------------
%
    function textmode_Callback

        if strcmp(get(DMAT.GUIcontrols.WindowHandles.Main,'Visible'),'off')
            set(DMAT.GUIcontrols.WindowHandles.Output,'Visible','off');
            DMAT.GUIcontrols.WindowHandles.WasActive = ...
                DMAT.GUIcontrols.WindowHandles.Output;
        else
            set(DMAT.GUIcontrols.WindowHandles.Main,'Visible','off');
            DMAT.GUIcontrols.WindowHandles.WasActive = ...
                DMAT.GUIcontrols.WindowHandles.Main;
        end

        DMAT = dmat_textmode(DMAT);

        fprintf(1,'  Returning to GUI.\n')
        set(DMAT.GUIcontrols.WindowHandles.WasActive,'Visible','on');
        setstats

    end



%% ---------------------------------------------------------------------
%
    function colsch_Callback

        val=get(DMAT.GUIcontrols.AdvancedWindow.colsch,'Value');
        col = get(DMAT.GUIcontrols.AdvancedWindow.colsch,'String');
        setcolors(col{val});

    end



%% ---------------------------------------------------------------------
%
    function setcolors(colors)

        if strcmp(colors,'random')
            colors = rand(11,3)*.65+.35;
            colors(9,:)= [1 1 1];
        else
            clrstr=load('clr.schms','-mat');
            colors = clrstr.(colors);
        end
        DMAT.GUIcontrols.ColorScheme = struct(...
            'About',     colors(1,:),...
            'Advanced',  colors(2,:),...
            'Bias',      colors(3,:),...
            'Design',    colors(4,:),...
            'Fixes',     colors(5,:),...
            'Main',      colors(6,:),...
            'Outliers',  colors(7,:),...
            'Output',    colors(8,:),...
            'OutputEdit',colors(9,:),...
            'Predefined',colors(10,:),...
            'View',      colors(11,:));

        if isfield(DMAT.GUIcontrols,'WindowHandles')
            if isfield(DMAT.GUIcontrols.WindowHandles,'Main')
                set(DMAT.GUIcontrols.WindowHandles.Main,...
                    'Color',DMAT.GUIcontrols.ColorScheme.Main);
                set([DMAT.GUIcontrols.MainWindow.fnt,...
                    DMAT.GUIcontrols.MainWindow.datpnl,...
                    DMAT.GUIcontrols.MainWindow.setpnl,...
                    DMAT.GUIcontrols.MainWindow.cursetpnl,...
                    DMAT.GUIcontrols.MainWindow.quepnl,...
                    DMAT.GUIcontrols.MainWindow.toolspnl,...
                    DMAT.GUIcontrols.MainWindow.message,...
                    DMAT.GUIcontrols.MainWindow.addtx,...
                    DMAT.GUIcontrols.MainWindow.oltx,...
                    DMAT.GUIcontrols.MainWindow.destx,...
                    DMAT.GUIcontrols.MainWindow.fixtx,...
                    DMAT.GUIcontrols.MainWindow.biastx,...
                    DMAT.GUIcontrols.MainWindow.otlstat,...
                    DMAT.GUIcontrols.MainWindow.desstat,...
                    DMAT.GUIcontrols.MainWindow.fixstat,...
                    DMAT.GUIcontrols.MainWindow.biasstat],...
                    'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Main);
            end
            if isfield(DMAT.GUIcontrols.WindowHandles,'Advanced')
                set(DMAT.GUIcontrols.WindowHandles.Advanced,...
                    'Color',DMAT.GUIcontrols.ColorScheme.Advanced);
                set([DMAT.GUIcontrols.AdvancedWindow.objpnl,...
                    DMAT.GUIcontrols.AdvancedWindow.estmtx,...
                    DMAT.GUIcontrols.AdvancedWindow.simprestxt,...
                    DMAT.GUIcontrols.AdvancedWindow.simprestxtl,...
                    DMAT.GUIcontrols.AdvancedWindow.simpitertxt,...
                    DMAT.GUIcontrols.AdvancedWindow.bitertx,...
                    DMAT.GUIcontrols.AdvancedWindow.btypetx,...
                    DMAT.GUIcontrols.AdvancedWindow.bootpnl,...
                    DMAT.GUIcontrols.AdvancedWindow.colpnl,...
                    DMAT.GUIcontrols.AdvancedWindow.colschtxt,...
                    DMAT.GUIcontrols.AdvancedWindow.guesstxt],...
                    'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced);
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function setmessage(str)

        set(DMAT.GUIcontrols.MainWindow.message,'String',str);

    end



%% ---------------------------------------------------------------------
%
    function reopenmain

        set(DMAT.GUIcontrols.WindowHandles.Main,'Visible','on');
        showdata
        setmessage('Ready.')

    end



%% ---------------------------------------------------------------------
%
    function dmhlp_Callback

        helpdlg(['Be sure to confirm each changed parameter by leaving '...
            'the cell after you change its value.'],'Important hint');

    end



%% ---------------------------------------------------------------------
%
    function nodataseterror

        errordlg('You need to supply a dataset first.','Error','on');

    end



%% ---------------------------------------------------------------------
%
    function restrictwarn

        errordlg(['These vectors need to be the same size. The second '...
            'input vector has been deleted.'],'Sorry','on');

    end



%% ---------------------------------------------------------------------
%
    function hlp_Callback

        helpdlg(['For help on how to get started, please read the ',...
            'DMAT Manual'],'Not much help')

    end



%% ---------------------------------------------------------------------
%
    function descriptives_Callback

        if ~isfield(DMAT.Data,'NCond')
            nodataseterror
        else
            outputviewer_Callback
            set(DMAT.GUIcontrols.OutputWindow.lbtype,'Value',1)
            displayop
        end

    end



%% ---------------------------------------------------------------------
%
    function tools_Callback

        DMAT.GUIcontrols.WindowHandles.Tools = figure(...
            'NumberTitle','off',...
            'Toolbar','None',...
            'Resize','on',...
            'Color',DMAT.GUIcontrols.ColorScheme.Advanced,...
            'Name','Diffusion simulator: Ready',...
            'DockControls','on',...
            'MenuBar','figure',...
            'Units','normalized',...
            'WindowStyle',windowstyle,...
            'Position',[.05 .65 .35 .25]);

        DMAT.GUIcontrols.ToolsWindow.simulpnl = uipanel(...
            'Parent',DMAT.GUIcontrols.WindowHandles.Tools,...
            'Title','Simulate diffusion data',...
            'Units','normalized',...
            'Position',[.025 .025 .95 .95],...
            'BackgroundColor',DMAT.GUIcontrols.ColorScheme.Advanced);

        p = standardparset(1);
        [r c] = size(p);
        p = [p repmat(250,r,1)];
        cl = mat2cell(p,ones(1,r),ones(c+1,1));
        cl = eachcell('num2str',cl);

        DMAT.GUIcontrols.ToolsWindow.partbl = uitable(...
            'Data',cl,...
            'ColumnName',{'a', 'Ter', 'eta', 'z', 'sZ', 'st', 'v', 'N'},...
            'Parent',DMAT.GUIcontrols.WindowHandles.Tools,...
            'ColumnWidth','auto',...
            'Units','Normalized',...
            'ColumnEditable',true,...
            'Position',[.05 .28 .9 .6]);

        DMAT.GUIcontrols.ToolsWindow.setconditions = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Tools,...
            'Style','Pushbutton',...
            'Units','normalized',...
            'Position',[.05 .1 .3 .13],...
            'String','Set # of conditions:',...
            'Callback',@(y,z)dmatgui(@setconditions_Callback));

        DMAT.GUIcontrols.ToolsWindow.nconditions = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Tools,...
            'Style','Edit',...
            'Units','normalized',...
            'Position',[.37 .1 .1 .13],...
            'BackgroundColor',[1 1 1],...
            'String',num2str(r),...
            'Callback',@(y,z)dmatgui(@setconditions_Callback));

        DMAT.GUIcontrols.ToolsWindow.simulsave = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Tools,...
            'Style','Pushbutton',...
            'Units','normalized',...
            'Position',[.5 .1 .3 .13],...
            'String','Simulate and save',...
            'Callback',@(y,z)dmatgui(@simulsave_Callback));

        DMAT.GUIcontrols.ToolsWindow.toolsclose = uicontrol(...
            DMAT.GUIcontrols.WindowHandles.Tools,...
            'Style','Pushbutton',...
            'Units','normalized',...
            'Position',[.82 .1 .13 .13],...
            'String','Close',...
            'Callback',@(y,z)dmatgui(@toolsclose_Callback));

    end



%% ---------------------------------------------------------------------
%
    function simulsave_Callback

        d = cell(get(DMAT.GUIcontrols.ToolsWindow.partbl,'Data'));
        if any(any(~cellfun('length',d)))
            errordlg('You need to input values for all parameters.','Error','on');
        else
            try
                pars = str2num(char(d(:,1:7))); %#ok
                pars = reshape(pars,numel(pars)/7,7);
                Ns = str2num(char(d(:,8))); %#ok
                [b p]=isgood(pars);
                d(p)={'NaN'}; %#ok
            catch
                b=false;
            end
            if ~b
                errordlg('This is not a valid parameter set.','Error','on');
                delete(DMAT.GUIcontrols.ToolsWindow.partbl);
                DMAT.GUIcontrols.ToolsWindow.partbl = uitable(...
                    'Data',d,...
                    'ColumnName',{'a', 'Ter', 'eta', 'z', 'sZ', 'st', 'v', 'N'},...
                    'Parent',DMAT.GUIcontrols.WindowHandles.Tools,...
                    'ColumnWidth','auto',...
                    'ColumnEditable',true,...
                    'Units','Normalized',...
                    'Position',[.05 .28 .9 .6]);
            else
                [fn, pat] = uiputfile('*.mat','Save as',...
                    sprintf('sim%s',datestr(now,'mmDDHHMM')));
                if ~isempty(fn) && ischar(fn)
                    set(DMAT.GUIcontrols.WindowHandles.Tools,'Name',...
                        'Generating data, please wait.')
                    drawnow
                    data = multisimul(pars,Ns); %#ok
                    set(DMAT.GUIcontrols.WindowHandles.Tools,'Name',...
                        'Diffusion simulator: Ready')
                    save([pat fn],'data');
                end
            end
        end

    end



%% ---------------------------------------------------------------------
%
    function setconditions_Callback

        maxncond = 11;
        n = str2double(get(DMAT.GUIcontrols.ToolsWindow.nconditions,...
            'String'));
        if n>maxncond
            errordlg(sprintf(...
                'The maximum number of conditions to simulate is %u.',...
                maxncond),'Error','on');
        else
            set(DMAT.GUIcontrols.ToolsWindow.partbl,'NumRows',n);
        end

    end



%% ---------------------------------------------------------------------
%
    function toolsclose_Callback

        close(DMAT.GUIcontrols.WindowHandles.Tools)

    end



%% ---------------------------------------------------------------------
%
    function session_Callback

        button = questdlg('Choose an action:','DMAT session','Save',...
            'Load','Cancel','Save');
        fl=true;
        if button
            switch button(1)
                case 'S'
                    [fn,pt] = uiputfile({'*.dms','DMA Session (*.dms)'},...
                        'Save session as','MySession');
                    save(fullfile(pt,fn),'DMAT');
                    setmessage('Session saved.')
                    fl=false;
                case 'L'
                    [fn,pt] = uigetfile({'*.dms','DMA session (*.dms)';...
                        '*.dmt','Autosave session (*.dmt)'},...
                        'Select your session'); %#ok
                    if ~isempty(fn) && ischar(fn)
                        gc = DMAT.GUIcontrols;
                        dms = [];
                        evalc('dms = load(fullfile(pt,fn),''-mat'');');
                        DMAT = dms.DMAT;
                        DMAT.GUIcontrols = gc;
                        setstats
                        if isfield(DMAT,'Data') && ~isempty(DMAT.Data)
                            showdata
                        end
                        fl=false;
                    end
                otherwise
                    %do nothing
            end
        end
        if fl
            setmessage('No action taken.')
        end
        figure(DMAT.GUIcontrols.WindowHandles.Main);

    end



%% ---------------------------------------------------------------------
%
    function fixdm
        if isfield(DMAT.Data,'NCond')
            for ctr = 1:length(DMAT.CurrentModel.DesignMatrix)
                if isempty(DMAT.CurrentModel.DesignMatrix{ctr})
                    DMAT.CurrentModel.DesignMatrix{ctr} = eye(DMAT.Data.NCond);
                elseif strcmp(DMAT.CurrentModel.DesignMatrix{ctr},'1')
                    DMAT.CurrentModel.DesignMatrix{ctr} = ones(DMAT.Data.NCond,1);
                end
            end
        end

    end



%% ---------------------------------------------------------------------

end

