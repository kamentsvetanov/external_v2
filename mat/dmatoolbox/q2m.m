function msg = q2m(queue,mfpath,mfname,datafile)
%Q2M  Produces an M-file to prepare and execute a DMAT queue
%   MSG = Q2M(QUEUE,MFPATH,MFNAME,DATAFILE), where QUEUE is an array of
%   OPTIONS structures for DMAT, MFPATH and MFNAME are the desired path and
%   name for the M-file, and DATAFILE is the file containing the data,
%   produces an M-file which can be executed in order to rebuild the
%   OPTIONS structure and run DMAT. The returned value MSG is empty if the
%   file was succesfully written, and contains a system-dependent error
%   message otherwise.
%
%   Warning: For very large design matrices, part of the options statements
%   in the generated M-file may not work unless the line of code is split
%   over several lines.
%
%   See also MULTIESTV4, M2Q.
%
%   Author: Joachim Vandekerckhove (joachim.vandekerckhove@psy.kuleuven.be)
%   Part of the DMA Toolbox. Please read the End User License Agreement,
%   contained in 'dmateula.txt' or by invoking the DMATLICENSE command. 
%   See also http://ppw.kuleuven.be/okp/dmatoolbox.

%   Edit 0.3: Fixed typos in options initialization line.
%   Edit 0.4: Introduced LOADDMATDATA function.
%             Introduced short-cuts to avoid long lines of code.

if strcmp(mfname(end-1:end),'.m')
    mfname=mfname(1:end-2);
end

if ispc, flag = 'wt'; else flag = 'w'; end
[fid msg]=fopen([mfpath mfname '.m'],flag);

if fid==-1
    return
end    

nmod = length(queue);

fprintf(fid,'%%%s  This queue fits a series of diffusion models\n',...
    upper(mfname));
fprintf(fid,'%% Datafile: %s\n',datafile);
fprintf(fid,'%% Model list:');
for ctr=1:nmod
    fprintf(fid,'\n%%   - %s',queue(ctr).Name);
end
fprintf(fid,'\n%%\n%% This file was generated by the DMA Toolbox on %s.',...
    datestr(now));
fprintf(fid,'\n%% See %s',dmatsite);
fprintf(fid,['\n\n%% Hint: To keep this file compatible with DMATGUI,',...
    ' make sure each\n%% non-comment line ends with a ''...'', a '';''',...
    ' or a '',''. Also make sure the\n%% datafile is stored in a string',...
    ' called ''fn'' and that the options structure\n%% is defined',...
    ' before the line where RUNQUEUE is called for the first time.']);
 
fprintf(fid,'\n\n%%%% First, load the data\n');
fprintf(fid,'fn = ''%s'';\n',datafile);
fprintf(fid,'data = loaddmatdata(fn);\n');
% switch datafile(end-2:end)
%     case {'txt'}, fprintf(fid,'data = dlmread(fn,'' '');\n');
%     case {'tab'}, fprintf(fid,'data = dlmread(fn,''\\t'');\n');
%     case {'mat'}, fprintf(fid,'s = load(fn);\n');
%         fprintf(fid,'name = sort(fieldnames(s));\n');
%         fprintf(fid,'data = s.(name{1});\n');
% end

for ctr=1:nmod
    fprintf(fid,'\n%%%% %s\n',queue(ctr).Name);
    if isfield(queue(ctr),'DesignMatrix') && numel(queue(ctr).DesignMatrix)>1
        queue(ctr).DesignMatrix = {queue(ctr).DesignMatrix};
    end
    for param = 1:size(queue(ctr).DesignMatrix{1},2)
        if iseye(queue(ctr).DesignMatrix{1}{param})
            queue(ctr).DesignMatrix{1}{param} = [];
        elseif size(queue(ctr).DesignMatrix{1}{param},2)==1 && ...
                all(queue(ctr).DesignMatrix{1}{param}==1)
            queue(ctr).DesignMatrix{1}{param} = '1';
        end
    end
    fprintf(fid,'options(%i) = %s;\n',ctr,var2str(queue(ctr)));
end

fprintf(fid,'\n%%%% Fit all models\noutput = runqueue(data,options);\n');
fprintf(fid,'\n%%%% Show a small summary table\nqtable(output);\n');

fprintf(fid,['disp(''      Queue finished. Check output structure ',...
    'array for results.'');\n']);
fclose(fid);