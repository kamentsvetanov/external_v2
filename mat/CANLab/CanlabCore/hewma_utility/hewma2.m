function [p,tm,Zcor,sterr,Zpop,tvals,sb,stats] = hewma2(Zm, varZm, lambda,varargin)% function [p,tm,Zcor,sterr,Zpop,tvals,sb,stats] = hewma2(Zm, varZm, lambda,[doplot],[dodetrend],[grpcontrast], [tt]);%% Hierarchical (Group) Ewma - HEWMA%% Martin Lindquist and Tor Wager - 10/02/05%% INPUT:% % Zm - data matrix (nsubjects x Time)% varZm - variance for each time point and subject% lambda - smoothing parameter% optional: Plot flag, 1 or 0% % OUTPUT:%% p - p-value% tm - maximumum (over time) group t-statistic % Zcor - temporal-search corrected Z-score (max t - nullmaxt) / std(nullmax t)% % NOTE: The speed of this function is largely determined by nrep, which is% the number of repititions in the Monte carlo integration. A large value% of nrep gives greater accuracy, but is slower.%% Example:% Generate random data where there should be a true effect and test% n = noisevector(100,[1 .9 .8 .6 .4 .1],1);% n = [zeros(1,60) n];% for i = 1:20, Zm(i,:) = n + randn(1,160);,end% varZm = ones(size(Zm));% [p,tm,Zcor,sterr,Zpop,tvals,sb,stats] = hewma2(Zm, varZm,.2,1);%% Now try with random, non-identical weights:% varZm = rand(size(Zm));% % Now try with random autocorrelated data% for i = 1:20, Zm(i,:) = noisevector(160,[1 .9 .8 .5 .2],1)';,end% [p,tm,Zcor,sterr,Zpop,tvals,sb,stats] = hewma2(Zm, varZm, .2,1);%% Add a group difference:% n = noisevector(100,[1 .9 .8 .6 .4 .1],1);% n = [zeros(1,60) n];% for i = 1:10, Zm(i,:) = n + randn(1,160);,end% n = noisevector(100,[1 .9 .8 .6 .4 .1],1);% n = [zeros(1,60) n];% for i = 11:20, Zm(i,:) = n + randn(1,160);,end% varZm = ones(size(Zm));% [p,tm,Zcor,sterr,Zpop,tvals,sb,stats] = hewma2(Zm, varZm,.2,1,0,[ones(10,1); -1*ones(10,1)]);%% Add linear drift, to test detrending:% n = noisevector(100,[1 .9 .8 .6 .4 .1],1);% n = [zeros(1,60) n];% for i = 1:10, Zm(i,:) = n + randn(1,160) + (rand(1)-.5) * (1:160);,end% n = noisevector(100,[1 .9 .8 .6 .4 .1],1);% n = [zeros(1,60) n];% for i = 11:20, Zm(i,:) = n + randn(1,160) + (rand(1)-.5) * (1:160);,end% varZm = ones(size(Zm));% [p,tm,Zcor,sterr,Zpop,tvals,sb,stats] = hewma2(Zm, varZm,.2,1,0,[ones(10,1); -1*ones(10,1)]);%% Notes:  tested 10/27/05 with constant weights -- tested OK compared with% t-testif length(varargin) > 0, doplot = varargin{1}; else doplot = 0; endif length(varargin) > 1, dodetrend = varargin{2}; else dodetrend = 0; endif length(varargin) > 2, grpcontrast = varargin{3}; else grpcontrast = []; endif length(varargin) > 3, tt = varargin{4}; else tt = 60; end%tt=60;  % baseline time points% -----------------------------------------------------------------------% Identify potentially problematic subjects, with no change in Z% -----------------------------------------------------------------------tmp = diff(Zm,1,2);tmp = sum((abs(tmp)<eps)');prob = tmp > size(Zm,2)./8 | var(Zm(:,1:tt)') < eps;   % more than 1/8 of Zm points do not vary% could be NaNs in timeseries toogood = find(~prob);   % good subjectsprob = find(prob);  % bad subjects    %prob = find(any(abs(tmp)<eps,2))';if ~isempty(prob),    %disp(['Warning! Sub or subs: ' num2str(prob) ' do not vary in mean.  Removing these.'])    Zm(prob,:) = []; %NaN;    varZm(prob,:) = []; %NaN;    if ~isempty(grpcontrast)        grpcontrast(prob) = []; %NaN;    endendif isempty(varZm), varZm = ones(size(Zm)); end% -----------------------------------------------------------------------%%%% Find data dimensions% -----------------------------------------------------------------------dim = size(Zm);nsub = dim(1);              % Number of subjectsT = dim(2);                 % Number of timepoints%%%%% -----------------------------------------------------------------------% Linear detrending, if specified% -----------------------------------------------------------------------if dodetrend,	Zm = linear_detrending(Zm);end;% -----------------------------------------------------------------------% variance components and subject weights% -----------------------------------------------------------------------varbtwn = repmat(max(0,(var(Zm)-mean(varZm))),nsub,1);                      % Estimate of the between subject variance assuming white noise: MSA - mean(MSE)varwplusb = varZm+varbtwn;Wm = (1./varwplusb)./repmat(sum(1./varwplusb),nsub,1);        % Calculate weights% pool weights across time for each subject, ok because weights are% generally stable over timeWm = mean(Wm,2);% ML - don't think we need this% center weights at mean of 1 for weighted_corrcoef (weighted_reg)% Wm = Wm - mean(Wm) + 1;% subtract individual baseline period from each subjectmu = mean(Zm(:,1:tt)')';                               % Calculate baseline individual means Zm = Zm - repmat(mu,1,T);stats.mu_ind = mu; % -----------------------------------------------------------------------% weighted (hierarchical) regression% -----------------------------------------------------------------------% rb, covb are correl and covariance matrices across time for Zpop% contrast across means (group difference) if grpcontrast is not empty%[Zpop,df,ZPdiff,dfdiff,regstat] = weighted_reg(Zm,Wm,varwplusb,grpcontrast);[means,regstat] = weighted_reg(Zm,Wm,varwplusb,'btwn',grpcontrast);Zpop = means.Ymean;df = regstat.dfe;mu = mean(Zpop(1:tt));                              % population mean% error variance and covariance%%% After detrending assume that the noise has constant variancerb = regstat.r;covb = regstat.xy;sesq = regstat.v(tt+1:end)';      % between-subjects variance estimatesb = (regstat.v .^ .5)';          % st. error before pooling, for output% pooling of variance across timevmean = mean(sesq);                                 %sesq = repmat(vmean,1,T);                           % Changed by ML 10/26/05 - assume equal variance over timesterr = sesq.^.5;                                   %if ~isempty(grpcontrast)        ZPdiff = means.Ydiff;    dfdiff = regstat.dfediff;        mudiff = mean(ZPdiff(1:tt));             % error variance and covariance    %%% After detrending assume that the noise has constant variance    rbdiff = regstat.rdiff;    covbdiff = regstat.xydiff;        %sesqdiff = regstat.vdiff';    % pooled version    sesqdiff = repmat(mean(regstat.vdiff(tt+1:end)),1,T);        %sterrdiff = sqrt(regstat.vdiff');    sterrdiff = sqrt(sesqdiff);        stats.grpfits = means.grpmeans;endif ~isempty(grpcontrast)   end    % -----------------------------------------------------------------------% monte carlo simulation to get corrected p-value (searching over time)% -----------------------------------------------------------------------% returns t-value timeseries, max t after baseline period, and time of max t[tvals,tm] = get_max_t(Zpop,sterr,tt);% returns critical threshold and corrected Z, p values for max t-value[Zcor,p,tthresh,q,C] = timeseries_mc_pvalue(varZm(:,tt+1:end),lambda,Wm,sesq(tt+1:end),df,tm);   % Only use data after baseline ends to calculate p-value% Changed by ML 10/26/05 - remove baseline data in calculation of p-valuesstats.Wm = Wm; stats.tthresh = tthresh; stats.df = df;stats.tm = tm; stats.tvals = tvals; stats.corr_p = p;stats.descrip = 'Wm = case weights, tthresh = corrected p<.05 t-threshold';if ~isempty(grpcontrast)    [tvalsdiff,tmdiff] = get_max_t(ZPdiff,sterrdiff,tt);        [stats.Zcordiff,stats.pdiff,tthreshdiff,stats.qdiff] = timeseries_mc_pvalue(varZm,lambda,Wm,regstat.vdiff',dfdiff,tmdiff);        stats.tthreshdiff = tthreshdiff; stats.tvalsdiff = tvalsdiff; stats.tmdiff = tmdiff; stats.dfdiff = dfdiff;end% -----------------------------------------------------------------------% change point estimation for population% -----------------------------------------------------------------------[stats.cp,stats.first_ooc_tval,stats.maxtime,tvalsdummy,ooc_indices,oocvector] = change_point(tvals,tt,'thresh',tthresh);stats.oocvector = oocvector;if ~isempty(grpcontrast)    [stats.cpdiff,stats.first_ooc_tval_diff,stats.maxtimediff,tvdd,ooc_ind_diff,oocvectordiff] = change_point(tvalsdiff,tt,'thresh',tthreshdiff);    stats.oocvectordiff = oocvectordiff;end% -----------------------------------------------------------------------% indiv change points% -----------------------------------------------------------------------for i = 1:size(Zm,1)    [tind] = get_max_t(Zm(i,:),sqrt(varZm(i,:)),tt);    %    [stats.cp_ind(i)] = change_point(tind,tt,'time',stats.maxtime);    % Changed by ML 10/26/05 - It didn't work to directly set cp_ind(i) =    % []; Quick fix below    cpi = change_point(tind,tt,'time',stats.maxtime);    if isempty(cpi),        stats.cp_ind(i) = NaN;    else        stats.cp_ind(i) = cpi;    end;end  % put bad subjects back intmp = []; tmp(good) = stats.cp_ind;tmp(prob) = NaN;stats.cp_ind = tmp;%duration estimates from groupstats.maxrunlength = 0; stats.numooc = 0;if ~isempty(ooc_indices)    [cnt, tot, lenmat] = cnt_runs(oocvector);    stats.maxrunlength = max(lenmat);    stats.numooc = tot;endif ~isempty(grpcontrast)    stats.maxrunlengthdiff = 0; stats.numoocdiff = 0;    if ~isempty(ooc_ind_diff)        [cnt, tot, lenmat] = cnt_runs(oocvectordiff);        stats.maxrunlengthdiff = max(lenmat);        stats.numoocdiff = tot;    endend% -----------------------------------------------------------------------% change point estimation for population -- revised.% -----------------------------------------------------------------------%[stats.cp] = nanmean(stats.cp_ind);if ~isempty(grpcontrast)       if isempty(stats.cpdiff), stats.cpdiff = NaN;,end    if isempty(stats.first_ooc_tval_diff), stats.first_ooc_tval_diff = NaN;,end    if isempty(stats.maxtimediff), stats.maxtimediff = NaN;,endendif isempty(stats.cp), stats.cp = NaN;,endif isempty(stats.first_ooc_tval), stats.first_ooc_tval = NaN;,endif isempty(stats.maxtime), stats.maxtime = NaN;,end% % -----------------------------------------------------------------------% plots% -----------------------------------------------------------------------if doplot        hewma2_plot(Zpop,mu,stats.cp,stats.cp_ind,ooc_indices,stats.maxtime,stats.tthresh,tt,tm,q,Wm,Zm,sterr);        if ~isempty(grpcontrast)        hewma2_plot(ZPdiff,mudiff,stats.cpdiff,[],ooc_ind_diff,stats.maxtimediff,stats.tthreshdiff,tt,tmdiff,stats.qdiff,Wm,Zm,sterrdiff,stats.grpfits);    end    endreturn;